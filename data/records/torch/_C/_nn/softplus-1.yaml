args:
  dtype:
  - Tensor
  - number
  - number
  - Tensor
  is_pos:
  - true
  - false
  - false
  - false
  name:
  - self
  - beta
  - threshold
  - out
  required:
  - true
  - false
  - false
  - true
name: torch._C._nn.softplus
package: torch
pass_rate: 76.0
rules:
- - cot: synthesized
    length: 2
    target:
      choosen_dtype:
        beta: int
        out: tensor
        self: tensor
        threshold: int
      msg: '"softplus_cpu" not implemented for ''Int'''
      package: torch
    txt: (out.dtype in [torch.float32, torch.float64]) or (dtype(self) != int32)
  - f1_score: 100.0
    overall_score: 100
    precision: 100.0
    recall: 100.0
- - cot: 'Based on the given runtime information, the constraint that would prevent
      the error is:'
    length: 1
    target:
      choosen_dtype:
        beta: int
        out: tensor
        self: tensor
        threshold: int
      msg: Found dtype Float but expected Int
      package: torch
    txt: dtype(out) == dtype(self)
  - f1_score: 100.0
    overall_score: 100
    precision: 100.0
    recall: 100.0
- - cot: ''
    length: 1
    target:
      choosen_dtype:
        beta: int
        out: tensor
        self: tensor
        threshold: int
      msg: Trying to resize storage that is not resizable
      package: torch
    txt: out.rank == self.rank and all(out.shape[i] == self.shape[i] for i in range(out.rank))
  - f1_score: 75.18796992481204
    overall_score: 49.59398496240602
    precision: 100.0
    recall: 60.24096385542168
