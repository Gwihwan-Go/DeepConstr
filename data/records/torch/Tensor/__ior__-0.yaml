args:
  dtype:
  - Tensor
  - Tensor
  is_pos:
  - true
  - false
  name:
  - self
  - other
  required:
  - true
  - true
name: torch.Tensor.__ior__
package: torch
pass_rate: 0.0
rules:
- - cot: "The error is triggered because the shape of the output tensor ([5]) doesn't\
      \ match the broadcast shape ([]). This implies that there is a mismatch in the\
      \ dimensions when performing the broadcasting operation. \n\nTo prevent this\
      \ error, we need to ensure that the trailing dimensions of the tensors involved\
      \ in the operation are either 1 or the same. Therefore, we can formulate the\
      \ constraint as follows:"
    target:
      choosen_dtype:
        other: tensor
        self: tensor
      msg: output with shape [] doesn't match the broadcast shape [5]
      package: torch
    txt: self.shape[i] == 1
  - f1_score: 66.95661530999504
    overall_score: 38.47830765499752
    precision: 90.10309278350516
    recall: 53.271708740742255
- - cot: 'For the first error message, the constraint to prevent the error would be:'
    target:
      choosen_dtype:
        other: tensor
        self: tensor
      msg: The size of tensor a (4) must match the size of tensor b (6) at non-singleton
        dimension 2
      package: torch
    txt: self.shape[0] == other.shape[0]
  - f1_score: 91.74311926605505
    overall_score: 50.87155963302752
    precision: 100.0
    recall: 84.74576271186442
- - cot: divided
    target:
      choosen_dtype:
        other: tensor
        self: tensor
      msg: '"bitwise_or_cpu" not implemented for ''Float'''
      package: torch
    txt: (dtype(self) not in ["float16", "float32", "float64"])
  - f1_score: 77.41935483870967
    overall_score: 100
    precision: 100.0
    recall: 63.1578947368421
- - cot: synthesized
    target:
      choosen_dtype:
        other: tensor
        self: tensor
      msg: result type Float can't be cast to the desired output type Int
      package: torch
    txt: (dtype(self) == int32) and (dtype(self) == dtype(other))
  - f1_score: 66.66666666666667
    overall_score: 100
    precision: 100.0
    recall: 50.0
