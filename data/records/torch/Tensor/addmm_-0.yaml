args:
  dtype:
  - Tensor
  - Tensor
  - Tensor
  - number
  - number
  is_pos:
  - true
  - false
  - false
  - false
  - false
  name:
  - self
  - mat1
  - mat2
  - beta
  - alpha
  required:
  - true
  - true
  - true
  - false
  - false
name: torch.Tensor.addmm_
package: torch
pass_rate: 0.0
rules:
- - cot: ''
    length: 1
    target:
      choosen_dtype:
        alpha: int
        beta: int
        mat1: tensor
        mat2: tensor
        self: tensor
      msg: mat1 and mat2 must have the same dtype
      package: torch
    txt: mat1.dtype == mat2.dtype
  - f1_score: 100.0
    overall_score: 100
    precision: 100.0
    recall: 100.0
- - cot: divided
    length: 1
    target:
      choosen_dtype:
        alpha: int
        beta: int
        mat1: tensor
        mat2: tensor
        self: tensor
      msg: 'Bad in-place call: input tensor size [9, 8, 7, 6, 6, 6, 8] and output
        tensor size [2, 2] should match'
      package: torch
    txt: self.dim == mat1.dim
  - f1_score: 65.53672316384181
    overall_score: 44.76836158192091
    precision: 92.80000000000001
    recall: 50.65502183406113
- - cot: synthesized
    length: 2
    target:
      choosen_dtype:
        alpha: int
        beta: int
        mat1: tensor
        mat2: tensor
        self: tensor
      msg: mat1 must be a matrix, got 4-D tensor
      package: torch
    txt: (mat1.ndim == 2) and (mat2.ndim() == 2)
  - f1_score: 100.0
    overall_score: 100
    precision: 100.0
    recall: 100.0
- - cot: 'Error occurred because self and mat2 have different data types. self has
      Int dtype and mat2 has Float dtype. To prevent the error, we need to make sure
      that self and mat2 have the same dtype. Therefore, the constraint should be
      formulated as:'
    length: 1
    target:
      choosen_dtype:
        alpha: int
        beta: int
        mat1: tensor
        mat2: tensor
        self: tensor
      msg: self and mat2 must have the same dtype, but got Float and Int
      package: torch
    txt: self.dtype == mat2.dtype
  - f1_score: 100.0
    overall_score: 100
    precision: 100.0
    recall: 100.0
- - cot: 'The error is caused because the shapes of mat1 and mat2 are inconsistent.
      Let''s see what the arguments were. It seems mat1 has a shape of (8, 5) and
      mat2 has a shape of (3, 2). To prevent this error, the number of columns in
      mat1 should be equal to the number of rows in mat2. Therefore, the condition
      to prevent the error is:'
    length: 1
    target:
      choosen_dtype:
        alpha: int
        beta: int
        mat1: tensor
        mat2: tensor
        self: tensor
      msg: mat1 and mat2 shapes cannot be multiplied (3x4 and 8x5)
      package: torch
    txt: mat1.shape[1] == mat2.shape[0]
  - f1_score: 100.0
    overall_score: 100
    precision: 100.0
    recall: 100.0
