args:
  dtype:
  - Tensor
  - Tensor
  - Tensor
  - number
  - number
  is_pos:
  - true
  - false
  - false
  - false
  - false
  name:
  - self
  - vec1
  - vec2
  - beta
  - alpha
  required:
  - true
  - true
  - true
  - false
  - false
name: torch.Tensor.addr
package: torch
pass_rate: 0.631578947368421
rules:
- - cot: "The error occurs because the function torch.Tensor.addr expects a 1-dimensional\
      \ tensor as the argument vec1, but it is given a 2-dimensional tensor instead.\
      \ To prevent this error in the future and generate constraints that do not trigger\
      \ it, we need to ensure that the argument vec1 has only 1 dimension. \n\nThe\
      \ constraint for the dimension of vec1 can be expressed as:"
    target:
      choosen_dtype:
        alpha: int
        beta: int
        self: tensor
        vec1: tensor
        vec2: tensor
      msg: 'addr: Expected 1-D argument vec1, but got 2-D'
      package: torch
    txt: vec1.ndims() == 1
  - f1_score: 100.0
    overall_score: 100
    precision: 100.0
    recall: 100.0
- - cot: "Error is triggered because the expanded size of the tensor does not match\
      \ the existing size at the non-singleton dimension. This indicates a broadcasting\
      \ mismatch. \n\nTo prevent the error, the expanded size of the tensor should\
      \ match the existing size at the non-singleton dimension. \n\nBased on the given\
      \ runtime information, we can formulate the constraint as follows:"
    target:
      choosen_dtype:
        alpha: int
        beta: int
        self: tensor
        vec1: tensor
        vec2: tensor
      msg: 'The expanded size of the tensor (7) must match the existing size (4) at
        non-singleton dimension 1.  Target sizes: [6, 7].  Tensor sizes: [4]'
      package: torch
    txt: self.shape[1] == vec2.shape[0]
  - f1_score: 65.46344838998414
    overall_score: 37.73172419499207
    precision: 93.27146171693735
    recall: 50.428625645690715
