args:
  dtype:
  - Tensor
  - Tensor
  - Tensor
  - number
  - Tensor
  is_pos:
  - true
  - false
  - false
  - false
  - false
  name:
  - self
  - tensor1
  - tensor2
  - value
  - out
  required:
  - true
  - true
  - true
  - false
  - true
name: torch.addcmul
package: torch
pass_rate: 96.42857142857143
rules:
- - cot: synthesized
    length: 5
    target:
      choosen_dtype:
        out: tensor
        self: tensor
        tensor1: tensor
        tensor2: tensor
        value: int
      msg: The size of tensor a (4) must match the size of tensor b (9) at non-singleton
        dimension 3
      package: torch
    txt: ((((self.dim == tensor1.dim and self.shape[1] == tensor1.shape[1]) or (tensor1.dim()
      == tensor2.dim() and tensor1.shape[3] == tensor2.shape[3])) and (self.shape
      == tensor2.shape)) and (tensor1.shape == tensor2.shape)) or (out.shape == self.shape)
  - f1_score: 96.74185463659147
    overall_score: 48.85
    precision: 96.5
    recall: 96.98492462311557
- - cot: divided
    length: 1
    target:
      choosen_dtype:
        out: tensor
        self: tensor
        tensor1: tensor
        tensor2: tensor
        value: int
      msg: Trying to resize storage that is not resizable
      package: torch
    txt: tensor2.rank == 0
  - f1_score: 72.46886653064095
    overall_score: 51.58490566037736
    precision: 97.16981132075472
    recall: 57.78076966229103
- - cot: divided
    length: 1
    target:
      choosen_dtype:
        out: tensor
        self: tensor
        tensor1: tensor
        tensor2: tensor
        value: int
      msg: The size of tensor a (3) must match the size of tensor b (9) at non-singleton
        dimension 3
      package: torch
    txt: tensor1.shape[5] == 1
  - f1_score: 96.06299212598424
    overall_score: 100
    precision: 100.0
    recall: 92.42424242424242
- - cot: ''
    length: 1
    target:
      choosen_dtype:
        out: tensor
        self: tensor
        tensor1: tensor
        tensor2: tensor
        value: int
      msg: Trying to resize storage that is not resizable
      package: torch
    txt: out.rank == self.rank and all(out.shape[i] == self.shape[i] for i in range(out.rank))
  - f1_score: 74.49392712550608
    overall_score: 100
    precision: 100.0
    recall: 59.354838709677416
- - cot: ''
    length: 1
    target:
      choosen_dtype:
        out: tensor
        self: tensor
        tensor1: tensor
        tensor2: tensor
        value: int
      msg: result type Float can't be cast to the desired output type Int
      package: torch
    txt: dtype(self)==dtype(tensor1)==dtype(tensor2)
  - f1_score: 67.90123456790123
    overall_score: 100
    precision: 100.0
    recall: 51.40186915887851
