args:
  dtype:
  - Tensor
  - Tensor
  - Tensor
  is_pos:
  - true
  - false
  - false
  name:
  - self
  - other
  - out
  required:
  - true
  - true
  - true
name: torch.logaddexp2
package: torch
pass_rate: 97.97979797979798
rules:
- - cot: divided
    length: 1
    target:
      choosen_dtype:
        other: tensor
        out: tensor
        self: tensor
      msg: The size of tensor a (8) must match the size of tensor b (9) at non-singleton
        dimension 2
      package: torch
    txt: other.shape[2] == 1
  - f1_score: 86.58008658008657
    overall_score: 100
    precision: 100.0
    recall: 76.33587786259541
- - cot: ''
    length: 1
    target:
      choosen_dtype:
        other: tensor
        out: tensor
        self: tensor
      msg: Trying to resize storage that is not resizable
      package: torch
    txt: out.rank == self.rank and all(out.shape[i] == self.shape[i] for i in range(out.rank))
  - f1_score: 73.78277153558054
    overall_score: 52.25
    precision: 98.5
    recall: 58.982035928143716
- - cot: synthesized
    length: 2
    target:
      choosen_dtype:
        other: tensor
        out: tensor
        self: tensor
      msg: result type Float can't be cast to the desired output type Int
      package: torch
    txt: (dtype(other) == dtype(out)) and (dtype(out)==dtype(self))
  - f1_score: 85.83690987124463
    overall_score: 100
    precision: 100.0
    recall: 75.18796992481202
- - cot: 'The error occurs because the function "logaddexp2_cpu" is not implemented
      for tensors of type ''Int''. To prevent this error, we need to ensure that the
      input tensors have a data type that is supported by the "logaddexp2_cpu" function,
      such as ''Float''. Therefore, the constraint should be:'
    length: 1
    target:
      choosen_dtype:
        other: tensor
        out: tensor
        self: tensor
      msg: '"logaddexp2_cpu" not implemented for ''Int'''
      package: torch
    txt: dtype(self) == dtype(out) == dtype(other) == torch.float32
  - f1_score: 95.23809523809523
    overall_score: 100
    precision: 100.0
    recall: 90.9090909090909
