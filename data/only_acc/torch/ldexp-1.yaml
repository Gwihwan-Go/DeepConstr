args:
  dtype:
  - Tensor
  - Tensor
  - Tensor
  is_pos:
  - true
  - false
  - false
  name:
  - self
  - other
  - out
  required:
  - true
  - true
  - true
name: torch.ldexp
package: torch
pass_rate: 100
rules:
- - cot: 'Error is triggered because the size of tensor a (9) does not match the size
      of tensor b (2) at non-singleton dimension 6. To prevent this error, the dimensions
      and shapes of tensors a and b should be checked. Therefore, we can formulate
      the constraint as follows:'
    length: 1
    target:
      choosen_dtype:
        other: tensor
        out: tensor
        self: tensor
      msg: The size of tensor a (9) must match the size of tensor b (3) at non-singleton
        dimension 6
      package: torch
    txt: self.dim == other.dim and self.shape == other.shape
  - f1_score: 94.7867298578199
    overall_score: 100
    precision: 100.0
    recall: 90.09009009009009
- - cot: ''
    length: 1
    target:
      choosen_dtype:
        other: tensor
        out: tensor
        self: tensor
      msg: Trying to resize storage that is not resizable
      package: torch
    txt: out.rank == self.rank and all(out.shape[i] == self.shape[i] for i in range(out.rank))
  - f1_score: 75.046904315197
    overall_score: 100
    precision: 100.0
    recall: 60.06006006006006
- - cot: synthesized
    length: 2
    target:
      choosen_dtype:
        other: tensor
        out: tensor
        self: tensor
      msg: result type Float can't be cast to the desired output type Int
      package: torch
    txt: (dtype(other) == float32) and (dtype(other)==dtype(out))
  - f1_score: 81.96721311475409
    overall_score: 100
    precision: 100.0
    recall: 69.44444444444444
