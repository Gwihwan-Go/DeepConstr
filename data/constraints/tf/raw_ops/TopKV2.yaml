constraints:
  input:
    default: null
    dtype: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
    init: false
    required: true
  k:
    default: null
    dtype: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
    init: false
    required: true
  name:
    default: null
    dtype: str
    init: false
    required: false
  sorted:
    default: true
    dtype: bool
    init: false
    required: false
infered_history:
- 3
- 4
- 3
infered_times: 12
package: tf
pass_rate: 0.0
rules:
- cot: 'The error arises due to the attribute ''T'' being of type bool, which is not
    in the allowed list of types: float, double, int32, uint8, int16, int8, int64,
    bfloat16, uint16, half, uint32, uint64. This means that the input tensor''s dtype
    is not compatible. Therefore, the Left : type(input) should be corrected to match
    one of the allowed types. Op : in, and Right : [float, double, int32, uint8, int16,
    int8, int64, bfloat16, uint16, half, uint32, uint64].'
  target: "Value for attr 'Tk' of double is not in the list of allowed values: int16,\
    \ int32, int64\n ; NodeDef: ; Op values:T, indices:index_type; attr=sorted:bool,default=true;\
    \ attr=T:type,allowed=[DT_FLOAT, DT_DOUBLE, DT_INT32, DT_UINT8, DT_INT16, DT_INT8,\
    \ DT_INT64, DT_BFLOAT16, DT_UINT16, DT_HALF, DT_UINT32, DT_UINT64]; attr=Tk:type,default=DT_INT32,allowed=[DT_INT16,\
    \ DT_INT32, DT_INT64]; attr=index_type:type,default=DT_INT32,allowed=[DT_INT16,\
    \ DT_INT32, DT_INT64]> [Op:TopKV2] name:"
  txt: (type(input) in ["float", "double", "int32", "uint8", "int16", "int8", "int64",
    "bfloat16", "uint16", "half", "uint32", "uint64"]) and (type(k) in ["int16", "int32",
    "int64"]) and (type(input) in ["float", "double", "int32", "uint8", "int16", "int8",
    "int64", "bfloat16", "uint16", "half", "uint32", "uint64"])
- cot: 'The error has occurred because ''k'' is not scalar but it was supposed to
    be. The input ''k'' had a shape with 5 dimensions. But the operator requires a
    scalar input. So we need to ensure that ''k'' is a scalar. Therefore, Left : k.dim
    should be corrected. Ops : ''=='', Right : 0.'
  target: "k must be scalar, got shape [9,6,6,8,1]\n [[]] [Op:TopKV2] name:"
  txt: k.dim == 0
time_cost: 319.54999685287476
title: tf.raw_ops.TopKV2
tokens_used: 8777
