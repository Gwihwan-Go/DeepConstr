constraints:
  name:
    default: null
    dtype: str
    init: false
    required: false
  x:
    default: null
    dtype: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
    init: false
    required: true
  y:
    default: null
    dtype: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
    init: false
    required: true
infered_history:
- 4
- 1
- 5
infered_times: 11
package: tf
pass_rate: 0.76
rules:
- cot: 'The error arises because the function is trying to perform a operation on
    a float tensor and a complex64 tensor. However, both tensors in generated args
    must have the same data type. Let''s see what the args were. the ''x'' tensor
    is float32, but the ''y'' tensor is of type complex64. Therefore, Left : type(y),
    which is the type of tensor y, should be corrected. It says that should be equal
    to the datatype of tensor x, so Op : ==, and Right : type(x).'
  target: 'cannot compute SquaredDifference as input #1(zero-based) was expected to
    be a float tensor but is a complex64 tensor [Op:SquaredDifference] name:'
  txt: type(y)==type(x)
- cot: 'The error is due to the attribute ''T'' having a value of int8, which is not
    an allowed value. The allowed values are: bfloat16, half, float, double, int32,
    int64, complex64, complex128. Tensors ''''x'''' and ''''y'''' are provided as
    int16, which is also not compatible. Therefore, the Left : type(x) or type(y)
    should be corrected to match one of the allowed types. Op : in, and Right : [bfloat16,
    half, float, double, int32, int64, complex64, complex128].'
  target: "Value for attr 'T' of int8 is not in the list of allowed values: bfloat16,\
    \ half, float, double, int32, int64, complex64, complex128\n ; NodeDef: ; Op z:T;\
    \ attr=T:type,allowed=[DT_BFLOAT16, DT_HALF, DT_FLOAT, DT_DOUBLE, DT_INT32, DT_INT64,\
    \ DT_COMPLEX64, DT_COMPLEX128]; is_commutative=true> [Op:SquaredDifference] name:"
  txt: type(x) in ["bfloat16", "half", "float", "double", "int32", "int64", "complex64",
    "complex128"] and type(y) in ["bfloat16", "half", "float", "double", "int32",
    "int64", "complex64", "complex128"]
- cot: 'The error is triggered because the shapes of ''x'' and ''y'' are inconsistent
    and not broadcastable. The shape of ''x'' is [1, 4, 1, 1] and the shape of ''y''
    is [10, 4, 8]. Broadcasting in tensor operations aligns dimensions from the end
    and requires that the trailing dimensions of the tensors are either 1 or the same.
    However, the third dimension from the end in ''x'' and ''y'' are not the same
    and neither is 1, which is causing the error. To prevent this error, we should
    enforce that each dimension from the end in ''x'' and ''y'' should be the same
    or one of them should be 1. '
  target: 'Incompatible shapes: [9,6,6,1,3,4,1,1,2,7] vs. [2,6,6,1,1,7,2,6,7,1] [Op:SquaredDifference]
    name:'
  txt: all(x.shape[i] == y.shape[i] or x.shape[i] == 1 or y.shape[i] == 1 for i in
    range(-1, -min(len(x.shape), len(y.shape))-1, -1)) and (len(x.shape) >= len(y.shape)
    or x.shape[0] == 1)
time_cost: 641.2294499874115
title: tf.raw_ops.SquaredDifference
tokens_used: 8435
