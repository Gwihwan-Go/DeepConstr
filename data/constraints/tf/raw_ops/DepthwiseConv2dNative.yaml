constraints:
  data_format:
    default: NHWC
    dtype: str
    init: false
    required: false
  dilations:
    default:
    - 1
    - 1
    - 1
    - 1
    dtype: list[int]
    init: false
    required: false
  explicit_paddings:
    default: []
    dtype: list[int]
    init: false
    required: false
  filter:
    default: null
    dtype: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
    init: false
    required: true
  input:
    default: null
    dtype: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
    init: false
    required: true
  name:
    default: null
    dtype: str
    init: false
    required: false
  padding:
    default: null
    dtype: str
    init: false
    required: true
  strides:
    default: null
    dtype: list[int]
    init: false
    required: true
infered_history: []
infered_times: 25
package: tf
pass_rate: 0.0
rules:
- cot: 'The error arises because the ''data_format'' attribute value is ''args'',
    but it is expected to be either ''NHWC'' or ''NCHW''. Moreover, the attribute
    ''padding'' is also provided as ''args'', while it is expected to be either ''SAME'',
    ''VALID'', or ''EXPLICIT''. Therefore, the Left : data_format and padding should
    be corrected to match one of the allowed values. Op : in, and Right : ["NHWC",
    "NCHW"] for data_format and ["SAME", "VALID", "EXPLICIT"] for padding.'
  target: "rror: Value for attr 'data_format' of \"args\" is not in the list of allowed\
    \ values: \"NHWC\", \"NCHW\"\n ; NodeDef: ; Op output:T; attr=T:type,allowed=[DT_HALF,\
    \ DT_BFLOAT16, DT_FLOAT, DT_DOUBLE]; attr=strides:list(int); attr=padding:string,allowed=[\"\
    SAME\", \"VALID\", \"EXPLICIT\"]; attr=explicit_paddings:list(int),default=[];\
    \ attr=data_format:string,default=\"NHWC\",allowed=[\"NHWC\", \"NCHW\"]; attr=dilations:list(int),default=[1,\
    \ 1, 1, 1]> [Op:DepthwiseConv2dNative] name:"
  txt: (data_format in ["NHWC", "NCHW"]) or ((type(filter) in ["half", "bfloat16",
    "float", "double"]) and ((type(input) in ["half", "bfloat16", "float", "double"])
    or (padding in ["SAME", "VALID", "EXPLICIT"])))
- cot: 'The error is due to the attribute ''complex32'' not found in the ''tensorflow''
    module. It seems like some of the parameters are not fitting into the expected
    constraints. Let''s see. ''data_format'' and ''padding'' are both ''args'', which
    doesn''t seem right. ''dilations'', ''explicit_paddings'', ''filter'' and ''strides''
    are lists, and their length should be equal. ''filter'' and ''input'' are tensors,
    their dimensions should match. ''filter'' has more dimensions compared to ''input'',
    which seems off. Therefore, Left : len(dilations), len(explicit_paddings), len(filter.shape),
    len(strides). Op : == Right : len(input.shape). Also, Left : type(data_format),
    type(padding). Op : != Right : ''args'''
  target: 'rror: module ''tensorflow'' has no attribute ''complex32'''
  txt: (all(i>=0 for i in dilations)) and (len(dilations)==len(input.shape))
- cot: 'Based on given values, Error is triggered because ''padding'' is missing in
    the given values. It expects ''padding'' value for the computation. Let''s see
    what the args were. It seems ''padding'' is missing, so padding should be added.
    Therefore, Left : padding. Op : in, and Right : values.keys()'
  target: 'rror: ''padding'''
  txt: '''padding'' in values.keys()'
time_cost: 8591.347313165665
title: tf.raw_ops.DepthwiseConv2dNative
tokens_used: 21313
trained: true
