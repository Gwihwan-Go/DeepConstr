constraints:
  default_value:
    default: null
    dtype: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
    init: false
    required: true
  name:
    default: null
    dtype: str
    init: false
    required: false
  output_shape:
    default: null
    dtype: int32,int64
    init: false
    required: true
  sparse_indices:
    default: null
    dtype: int32,int64
    init: false
    required: true
  sparse_values:
    default: null
    dtype: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
    init: false
    required: true
  validate_indices:
    default: true
    dtype: bool
    init: false
    required: false
infered_history:
- 5
- 4
- 5
- 4
infered_times: 19
package: tf
pass_rate: 0.0
rules:
- cot: The error arises because the 'sparse_indices', 'output_shape', 'sparse_values',
    'default_value', and 'validate_indices' are all None. These should not be None.
    The left side would be each of the previously mentioned variables and the operation
    would be '!=' and the right side would be None.
  target: 'cannot compute SparseToDense as input #1(zero-based) was expected to be
    a int64 tensor but is a float tensor [Op:SparseToDense] name:'
  txt: sparse_indices != None
- cot: 'The error results from the ''sparse_indices'' tensor being float32 while the
    attribute ''Tindices'' only allows int32 or int64. Therefore, the type of ''sparse_indices''
    should be either int32 or int64, not float32. Thus, the constraint is that type(sparse_indices)
    should be in [int32, int64]. Op : in, and Right : [int32, int64].'
  target: "Value for attr 'Tindices' of float is not in the list of allowed values:\
    \ int32, int64\n ; NodeDef: ; Op dense:T; attr=validate_indices:bool,default=true;\
    \ attr=T:type; attr=Tindices:type,allowed=[DT_INT32, DT_INT64]> [Op:SparseToDense]\
    \ name:"
  txt: type(sparse_indices) in ["int32", "int64"]
- cot: 'The error is probably caused by the None values of "sparse_indices", "output_shape",
    "sparse_values", "default_value", "validate_indices". These parameters should
    not be None for the operation to execute successfully. Therefore, we need to ensure
    that each of these parameters is not None. The logical constraints would be:

    Left : sparse_indices, Op : !=, Right : None

    Left : output_shape, Op : !=, Right : None

    Left : sparse_values, Op : !=, Right : None

    Left : default_value, Op : !=, Right : None

    Left : validate_indices, Op : !=, Right : None'
  target: "output_shape must be rank 1, got shape [10,4]\n [[]] [Op:SparseToDense]\
    \ name:"
  txt: sparse_indices != None, output_shape != None, sparse_values != None, default_value
    != None, validate_indices != None.
- cot: 'The error is triggered because the sparse_indices tensor is not scalar, vector,
    or matrix. Instead, it seems to have 10 dimensions. The Left : sparse_indices.dim
    should be corrected to fit into the constraints. Valid dimensions for sparse_indices
    are 0 (scalar), 1 (vector), or 2 (matrix). Therefore, Ops : ''in'', Right : [0,1,2].'
  target: "sparse_indices should be a scalar, vector, or matrix, got shape [6,1,3,4,1,3,2,8,2,6]\n\
    \ [[]] [Op:SparseToDense] name:"
  txt: sparse_indices.dim in [0,1,2]
time_cost: 3316.0126953125
title: tf.raw_ops.SparseToDense
tokens_used: 13043
trained: true
