constraints:
  dimension:
    default: 'null'
    dtype: list[int]
    init: false
    required: true
  input:
    default: 'null'
    dtype: float32,float64,int32,uint8,int16,int8,int64,bfloat16,uint16,float16,uint32,uint64,qint8,qint32,qint16,bool
    init: false
    required: true
  name:
    default: 'null'
    dtype: str
    init: false
    required: false
infered_history:
- 8
- 5
infered_times: 13
package: tf
pass_rate: 0.0
rules:
- cot: 'The error is triggered because the dimension is not a scalar. From the values,
    we see that dimension is an array with one element, thus having one dimension.
    So Left : dimension.dim should be corrected to scalar. Ops : ''=='', Right : 0.
    Additionally, ArgMax operation is receiving a tensor of shape [4], but it should
    only be receiving a scalar. Therefore, Left : input.dim. Ops : ''=='', Right :
    0.'
  target: 'dim must be a scalar, but received tensor of shape: [4] [Op:ArgMax]'
  txt: (len(input) > 0) or (input.dim == 0)
- cot: 'The error arises because the input tensor type (''TensorDType.qint32'') and
    device ('''') are not compatible with any of the registered kernels for the operation
    ''ArgMax''. For this operation, the input tensor should be of a type listed in
    the registered kernels (''DT_FLOAT'', ''DT_DOUBLE'', ''DT_INT32'', ''DT_UINT8'',
    ''DT_INT16'', ''DT_INT8'', ''DT_INT64'', ''DT_BOOL'', ''DT_QINT8'', ''DT_QUINT8'',
    ''DT_QINT32'', ''DT_BFLOAT16'', ''DT_UINT16'', ''DT_HALF'', ''DT_UINT32'', ''DT_UINT64'')
    and the operation should be run on a device that also matches with the registered
    kernels (''XLA_CPU_JIT'', ''XLA_GPU_JIT'', ''GPU'', ''CPU''). Hence, Left : type(input),
    Op : in, and Right : [''DT_FLOAT'', ''DT_DOUBLE'', ''DT_INT32'', ''DT_UINT8'',
    ''DT_INT16'', ''DT_INT8'', ''DT_INT64'', ''DT_BOOL'', ''DT_QINT8'', ''DT_QUINT8'',
    ''DT_QINT32'', ''DT_BFLOAT16'', ''DT_UINT16'', ''DT_HALF'', ''DT_UINT32'', ''DT_UINT64'']
    should be ensured. Also, device should be one among ''XLA_CPU_JIT'', ''XLA_GPU_JIT'',
    ''GPU'', ''CPU''.'
  target: "Could not find device for node: = ArgMax[T=DT_QINT8, Tidx=DT_INT32, output_type=DT_INT64]\n\
    All kernels registered for op ArgMax:\n device='XLA_CPU_JIT'; output_type in [DT_INT32,\
    \ DT_INT16, DT_INT64, DT_UINT16]; Tidx in [DT_INT32, DT_INT16, DT_INT64]; T in\
    \ [DT_FLOAT, DT_DOUBLE, DT_INT32, DT_UINT8, DT_INT16, DT_INT8, DT_INT64, DT_BOOL,\
    \ DT_QINT8, DT_QUINT8, DT_QINT32, DT_BFLOAT16, DT_UINT16, DT_HALF, DT_UINT32,\
    \ DT_UINT64]\n device='XLA_GPU_JIT'; output_type in [DT_INT32, DT_INT16, DT_INT64,\
    \ DT_UINT16]; Tidx in [DT_INT32, DT_INT16, DT_INT64]; T in [DT_FLOAT, DT_DOUBLE,\
    \ DT_INT32, DT_UINT8, DT_INT16, DT_INT8, DT_INT64, DT_BOOL, DT_QINT8, DT_QUINT8,\
    \ DT_QINT32, DT_BFLOAT16, DT_UINT16, DT_HALF, DT_UINT32, DT_UINT64]\n device='GPU';\
    \ T in [DT_BOOL]; output_type in [DT_INT32]; Tidx in [DT_INT32]\n device='GPU';\
    \ T in [DT_BOOL]; output_type in [DT_INT64]; Tidx in [DT_INT32]\n device='GPU';\
    \ T in [DT_DOUBLE]; output_type in [DT_INT32]; Tidx in [DT_INT32]\n device='GPU';\
    \ T in [DT_DOUBLE]; output_type in [DT_INT64]; Tidx in [DT_INT32]\n device='GPU';\
    \ T in [DT_FLOAT]; output_type in [DT_INT32]; Tidx in [DT_INT32]\n device='GPU';\
    \ T in [DT_FLOAT]; output_type in [DT_INT64]; Tidx in [DT_INT32]\n device='GPU';\
    \ T in [DT_BFLOAT16]; output_type in [DT_INT32]; Tidx in [DT_INT32]\n device='GPU';\
    \ T in [DT_BFLOAT16]; output_type in [DT_INT64]; Tidx in [DT_INT32]\n device='GPU';\
    \ T in [DT_HALF]; output_type in [DT_INT32]; Tidx in [DT_INT32]\n device='GPU';\
    \ T in [DT_HALF]; output_type in [DT_INT64]; Tidx in [DT_INT32]\n device='CPU';\
    \ T in [DT_BOOL]; output_type in [DT_UINT16]\n device='CPU'; T in [DT_BOOL]; output_type\
    \ in [DT_INT16]\n device='CPU'; T in [DT_BOOL]; output_type in [DT_INT32]\n device='CPU';\
    \ T in [DT_BOOL]; output_type in [DT_INT64]\n device='CPU'; T in [DT_DOUBLE];\
    \ output_type in [DT_UINT16]\n device='CPU'; T in [DT_DOUBLE]; output_type in\
    \ [DT_INT16]\n device='CPU'; T in [DT_DOUBLE]; output_type in [DT_INT32]\n device='CPU';\
    \ T in [DT_DOUBLE]; output_type in [DT_INT64]\n device='CPU'; T in [DT_FLOAT];\
    \ output_type in [DT_UINT16]\n device='CPU'; T in [DT_FLOAT]; output_type in [DT_INT16]\n\
    \ device='CPU'; T in [DT_FLOAT]; output_type in [DT_INT32]\n device='CPU'; T in\
    \ [DT_FLOAT]; output_type in [DT_INT64]\n device='CPU'; T in [DT_BFLOAT16]; output_type\
    \ in [DT_UINT16]\n device='CPU'; T in [DT_BFLOAT16]; output_type in [DT_INT16]\n\
    \ device='CPU'; T in [DT_BFLOAT16]; output_type in [DT_INT32]\n device='CPU';\
    \ T in [DT_BFLOAT16]; output_type in [DT_INT64]\n device='CPU'; T in [DT_HALF];\
    \ output_type in [DT_UINT16]\n device='CPU'; T in [DT_HALF]; output_type in [DT_INT16]\n\
    \ device='CPU'; T in [DT_HALF]; output_type in [DT_INT32]\n device='CPU'; T in\
    \ [DT_HALF]; output_type in [DT_INT64]\n device='CPU'; T in [DT_INT32]; output_type\
    \ in [DT_UINT16]\n device='CPU'; T in [DT_INT32]; output_type in [DT_INT16]\n\
    \ device='CPU'; T in [DT_INT32]; output_type in [DT_INT32]\n device='CPU'; T in\
    \ [DT_INT32]; output_type in [DT_INT64]\n device='CPU'; T in [DT_INT8]; output_type\
    \ in [DT_UINT16]\n device='CPU'; T in [DT_INT8]; output_type in [DT_INT16]\n device='CPU';\
    \ T in [DT_INT8]; output_type in [DT_INT32]\n device='CPU'; T in [DT_INT8]; output_type\
    \ in [DT_INT64]\n device='CPU'; T in [DT_UINT8]; output_type in [DT_UINT16]\n\
    \ device='CPU'; T in [DT_UINT8]; output_type in [DT_INT16]\n device='CPU'; T in\
    \ [DT_UINT8]; output_type in [DT_INT32]\n device='CPU'; T in [DT_UINT8]; output_type\
    \ in [DT_INT64]\n device='CPU'; T in [DT_INT16]; output_type in [DT_UINT16]\n\
    \ device='CPU'; T in [DT_INT16]; output_type in [DT_INT16]\n device='CPU'; T in\
    \ [DT_INT16]; output_type in [DT_INT32]\n device='CPU'; T in [DT_INT16]; output_type\
    \ in [DT_INT64]\n device='CPU'; T in [DT_UINT16]; output_type in [DT_UINT16]\n\
    \ device='CPU'; T in [DT_UINT16]; output_type in [DT_INT16]\n device='CPU'; T\
    \ in [DT_UINT16]; output_type in [DT_INT32]\n device='CPU'; T in [DT_UINT16];\
    \ output_type in [DT_INT64]\n device='CPU'; T in [DT_UINT32]; output_type in [DT_UINT16]\n\
    \ device='CPU'; T in [DT_UINT32]; output_type in [DT_INT16]\n device='CPU'; T\
    \ in [DT_UINT32]; output_type in [DT_INT32]\n device='CPU'; T in [DT_UINT32];\
    \ output_type in [DT_INT64]\n device='CPU'; T in [DT_INT64]; output_type in [DT_UINT16]\n\
    \ device='CPU'; T in [DT_INT64]; output_type in [DT_INT16]\n device='CPU'; T in\
    \ [DT_INT64]; output_type in [DT_INT32]\n device='CPU'; T in [DT_INT64]; output_type\
    \ in [DT_INT64]\n device='CPU'; T in [DT_UINT64]; output_type in [DT_UINT16]\n\
    \ device='CPU'; T in [DT_UINT64]; output_type in [DT_INT16]\n device='CPU'; T\
    \ in [DT_UINT64]; output_type in [DT_INT32]\n device='CPU'; T in [DT_UINT64];\
    \ output_type in [DT_INT64]\n [Op:ArgMax]"
  txt: type(input) in ['DT_FLOAT', 'DT_DOUBLE', 'DT_INT32', 'DT_UINT8', 'DT_INT16',
    'DT_INT8', 'DT_INT64', 'DT_BOOL', 'DT_QINT8', 'DT_QUINT8', 'DT_QINT32', 'DT_BFLOAT16',
    'DT_UINT16', 'DT_HALF', 'DT_UINT32', 'DT_UINT64'] and device in ['XLA_CPU_JIT',
    'XLA_GPU_JIT', 'GPU', 'CPU']
time_cost: 805.6617324352264
title: tf.raw_ops.ArgMax
tokens_used: 11616
trained: true
