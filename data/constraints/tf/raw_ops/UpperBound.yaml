constraints:
  name:
    default: null
    dtype: str
    init: false
    required: false
  sorted_inputs:
    default: null
    dtype: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
    init: false
    required: true
  values:
    default: null
    dtype: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
    init: false
    required: true
infered_history:
- 6
infered_times: 6
package: tf
pass_rate: 0.68
rules:
- cot: 'The error is due to the mismatch of data type. The operation expects a float
    tensor but an int16 tensor is provided. Considering the given values, ''values''
    tensor is float32 and ''sorted_inputs'' tensor is float64. Therefore, the data
    type of ''values'' tensor should match the data type of ''sorted_inputs'' tensor
    to avoid the error. Thus, Left : values.dtype, Op : ==, and Right : type(sorted_inputs).'
  target: 'cannot compute UpperBound as input #1(zero-based) was expected to be a
    float tensor but is a int16 tensor [Op:UpperBound] name:'
  txt: values.dtype == sorted_inputs.dtype
- cot: "The error is triggered because the rank of `sorted_inputs` is not 2. In this\
    \ case, `sorted_inputs` is a tensor of float32 with rank 3. To correct this, `sorted_inputs`\
    \ should be reshaped or sliced to have a rank of 2. \nTherefore, the Left : sorted_inputs.dim\
    \ should be corrected to 2. Ops : '==', Right : 2."
  target: 'Shape must be rank 2 but is rank 3 for `sorted_inputs` argument [Op:UpperBound]
    name:'
  txt: (values.dim == 2) and (sorted_inputs.dim == 2)
- cot: 'The error is due to the leading dimension size of both tensors not matching.
    The leading dimension of ''sorted_inputs'' is 10, while the leading dimension
    of ''values'' is 2. Therefore, to prevent this error, the first dimension of ''sorted_inputs''
    and ''values'' must be equal. We can describe this constraint as follows:

    Left : sorted_inputs.shape[0], Ops : ''=='', Right : values.shape[0].'
  target: 'Leading dim_size of both tensors must match. [Op:UpperBound] name:'
  txt: sorted_inputs.shape[0] == values.shape[0]
- cot: The error is due to the mismatch between the tensor data type (complex64) and
    the data types supported by the 'UpperBound' operation. The 'UpperBound' operation
    supports several data types, but complex64 is not one of them.
  target: "Could not find device for node: = UpperBound[T=DT_BOOL, out_type=DT_INT32]\n\
    All kernels registered for op UpperBound:\n device='XLA_CPU_JIT'; out_type in\
    \ [DT_INT32, DT_INT64]; T in [DT_FLOAT, DT_DOUBLE, DT_INT32, DT_UINT8, DT_INT16,\
    \ DT_INT8, DT_COMPLEX64, DT_INT64, DT_BOOL, DT_QINT8, DT_QUINT8, DT_QINT32, DT_BFLOAT16,\
    \ DT_UINT16, DT_COMPLEX128, DT_HALF, DT_UINT32, DT_UINT64, DT_FLOAT8_E5M2, DT_FLOAT8_E4M3FN,\
    \ DT_INT4, DT_UINT4]\n device='XLA_GPU_JIT'; out_type in [DT_INT32, DT_INT64];\
    \ T in [DT_FLOAT, DT_DOUBLE, DT_INT32, DT_UINT8, DT_INT16, DT_INT8, DT_COMPLEX64,\
    \ DT_INT64, DT_BOOL, DT_QINT8, DT_QUINT8, DT_QINT32, DT_BFLOAT16, DT_UINT16, DT_COMPLEX128,\
    \ DT_HALF, DT_UINT32, DT_UINT64, DT_FLOAT8_E5M2, DT_FLOAT8_E4M3FN, DT_INT4, DT_UINT4]\n\
    \ device='CPU'; T in [DT_DOUBLE]; out_type in [DT_INT64]\n device='CPU'; T in\
    \ [DT_FLOAT]; out_type in [DT_INT64]\n device='CPU'; T in [DT_BFLOAT16]; out_type\
    \ in [DT_INT64]\n device='CPU'; T in [DT_HALF]; out_type in [DT_INT64]\n device='CPU';\
    \ T in [DT_INT32]; out_type in [DT_INT64]\n device='CPU'; T in [DT_INT8]; out_type\
    \ in [DT_INT64]\n device='CPU'; T in [DT_UINT8]; out_type in [DT_INT64]\n device='CPU';\
    \ T in [DT_INT16]; out_type in [DT_INT64]\n device='CPU'; T in [DT_UINT16]; out_type\
    \ in [DT_INT64]\n device='CPU'; T in [DT_UINT32]; out_type in [DT_INT64]\n device='CPU';\
    \ T in [DT_INT64]; out_type in [DT_INT64]\n device='CPU'; T in [DT_UINT64]; out_type\
    \ in [DT_INT64]\n device='CPU'; T in [DT_DOUBLE]; out_type in [DT_INT32]\n device='CPU';\
    \ T in [DT_FLOAT]; out_type in [DT_INT32]\n device='CPU'; T in [DT_BFLOAT16];\
    \ out_type in [DT_INT32]\n device='CPU'; T in [DT_HALF]; out_type in [DT_INT32]\n\
    \ device='CPU'; T in [DT_INT32]; out_type in [DT_INT32]\n device='CPU'; T in [DT_INT8];\
    \ out_type in [DT_INT32]\n device='CPU'; T in [DT_UINT8]; out_type in [DT_INT32]\n\
    \ device='CPU'; T in [DT_INT16]; out_type in [DT_INT32]\n device='CPU'; T in [DT_UINT16];\
    \ out_type in [DT_INT32]\n device='CPU'; T in [DT_UINT32]; out_type in [DT_INT32]\n\
    \ device='CPU'; T in [DT_INT64]; out_type in [DT_INT32]\n device='CPU'; T in [DT_UINT64];\
    \ out_type in [DT_INT32]\n device='GPU'; T in [DT_DOUBLE]; out_type in [DT_INT64]\n\
    \ device='GPU'; T in [DT_FLOAT]; out_type in [DT_INT64]\n device='GPU'; T in [DT_BFLOAT16];\
    \ out_type in [DT_INT64]\n device='GPU'; T in [DT_HALF]; out_type in [DT_INT64]\n\
    \ device='GPU'; T in [DT_INT32]; out_type in [DT_INT64]\n device='GPU'; T in [DT_INT8];\
    \ out_type in [DT_INT64]\n device='GPU'; T in [DT_UINT8]; out_type in [DT_INT64]\n\
    \ device='GPU'; T in [DT_INT16]; out_type in [DT_INT64]\n device='GPU'; T in [DT_UINT16];\
    \ out_type in [DT_INT64]\n device='GPU'; T in [DT_UINT32]; out_type in [DT_INT64]\n\
    \ device='GPU'; T in [DT_INT64]; out_type in [DT_INT64]\n device='GPU'; T in [DT_UINT64];\
    \ out_type in [DT_INT64]\n device='GPU'; T in [DT_DOUBLE]; out_type in [DT_INT32]\n\
    \ device='GPU'; T in [DT_FLOAT]; out_type in [DT_INT32]\n device='GPU'; T in [DT_BFLOAT16];\
    \ out_type in [DT_INT32]\n device='GPU'; T in [DT_HALF]; out_type in [DT_INT32]\n\
    \ device='GPU'; T in [DT_INT32]; out_type in [DT_INT32]\n device='GPU'; T in [DT_INT8];\
    \ out_type in [DT_INT32]\n device='GPU'; T in [DT_UINT8]; out_type in [DT_INT32]\n\
    \ device='GPU'; T in [DT_INT16]; out_type in [DT_INT32]\n device='GPU'; T in [DT_UINT16];\
    \ out_type in [DT_INT32]\n device='GPU'; T in [DT_UINT32]; out_type in [DT_INT32]\n\
    \ device='GPU'; T in [DT_INT64]; out_type in [DT_INT32]\n device='GPU'; T in [DT_UINT64];\
    \ out_type in [DT_INT32]\n [Op:UpperBound] name:"
  txt: values.dtype in ['DT_FLOAT', 'DT_DOUBLE', 'DT_INT32', 'DT_UINT8', 'DT_INT16',
    'DT_INT8', 'DT_INT64', 'DT_BOOL', 'DT_QINT8', 'DT_QUINT8', 'DT_QINT32', 'DT_BFLOAT16',
    'DT_UINT16', 'DT_COMPLEX128', 'DT_HALF', 'DT_UINT32', 'DT_UINT64', 'DT_FLOAT8_E5M2',
    'DT_FLOAT8_E4M3FN', 'DT_INT4', 'DT_UINT4']
time_cost: 685.229754447937
title: tf.raw_ops.UpperBound
tokens_used: 12825
trained: true
