constraints:
  dim1:
    default: 0
    dtype: int
    init: false
    required: false
  dim2:
    default: 1
    dtype: int
    init: false
    required: false
  input:
    default: null
    dtype: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
    init: false
    required: true
  offset:
    default: 0
    dtype: int
    init: false
    required: false
  src:
    default: null
    dtype: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
    init: false
    required: true
infered_history: []
infered_times: 33
package: torch
pass_rate: 0.02
rules:
- cot: 'The error is caused by the diagonal dimensions being identical, specifically
    0,0. This can be caused by ''dim1'' and ''dim2'' both being 0. In this case, the
    inputs ''dim1'' and ''dim2'' should not be equal to prevent the error. Therefore,
    the relationship constraint should be: Left : dim1, Op : !=, Right : dim2.'
  target: diagonal dimensions cannot be identical 0, 0
  txt: dim1!=dim2
- cot: 'The error is due to an invalid dimension index. Let''s see what the args were.
    The function is trying to access dimension 4 of the input tensor, but the tensor''s
    rank is 1 (i.e., it only has one dimension). Therefore, ''dim1'' should be a valid
    dimension index, i.e., it should fall in the range of -input.rank to input.rank
    - 1. So, op : >= and <=; and right : -input.rank and input.rank - 1 respectively.'
  target: Dimension out of range (expected to be in range of [-1, 0], but got 4)
  txt: ((dim1<len(input.shape)) and (-len(input.shape)<=dim2 and dim2<len(input.shape)))
    and (-len(input.shape)<=dim1 and dim1<len(input.shape)) and ((dim1<len(input.shape))
    and (-len(input.shape)<=dim2 and dim2<len(input.shape)))
time_cost: 1917.5094661712646
title: torch.diagonal_scatter
tokens_used: 21276
trained: true
skipped: true 
skipped_reason: contraints infer failed