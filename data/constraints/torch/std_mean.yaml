constraints:
  correction:
    default: 1
    dtype: int
    init: false
    required: false
  dim:
    default: null
    dtype: list[int]
    init: false
    required: false
  input:
    default: null
    dtype: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
    init: false
    required: true
  keepdim:
    default: false
    dtype: bool
    init: false
    required: false
infered_history: []
infered_times: 8
package: torch
pass_rate: 0.67
rules:
- cot: "The error occurs because 'dim' parameter value of 10 is outside the valid\
    \ range of [-8, 7] for the input tensor. The valid range for the 'dim' parameter\
    \ is defined by the total number of dimensions in the input tensor. \n\nGiven\
    \ a tensor with shape: [6, 8, 6, 6, 1, 3, 4, 1], the total number of dimensions\
    \ is 8. So, the valid range for 'dim' is [-8, 7]. \n\nThe constraint for the 'dim'\
    \ parameter can be expressed as:"
  target: Dimension out of range (expected to be in range of [-8, 7], but got 10)
  txt: (all(dim[i] >= -len(input.shape) and dim[i] < len(input.shape) for i in range(len(dim))))
- cot: 'The error is due to the input tensor''s data type being int8, whereas the
    std_mean function only supports floating point and complex data types. When we
    assess the args, it seems that the ''input'' tensor has a dtype of int8, which
    is the cause of the error. Therefore, the ''input'' tensor''s dtype must be corrected.
    So, Left : input.dtype, and we expect it to be a floating point or complex dtype.
    Therefore, Op : in, Right : [float, complex].'
  target: std_mean only support floating point and complex dtypes
  txt: input.dtype in [float, complex]
time_cost: 207.5079996585846
title: torch.std_mean
tokens_used: 5106
trained: true
