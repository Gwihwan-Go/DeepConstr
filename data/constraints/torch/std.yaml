constraints:
  correction:
    default: '1'
    dtype: int
    init: false
    required: false
  dim:
    default: 'null'
    dtype: int
    init: false
    required: false
  input:
    default: 'null'
    dtype: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
    init: false
    required: true
  keepdim:
    default: 'false'
    dtype: bool
    init: false
    required: false
  out:
    default: 'null'
    dtype: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
    init: false
    required: false
infered_history: []
infered_times: 27
package: torch
pass_rate: 0.97
rules:
- cot: 'The error is caused by trying to resize the ''out'' tensor that is not resizable.
    It is assumed that the ''out'' tensor shape should match with the operation results.
    In this operation, the result shape is input.shape. However, the dimensions of
    ''out'' tensor and ''input'' tensor are different, which is causing the error.
    Therefore, left : out.shape, out.rank op : == right : input.shape, input.rank'
  target: Trying to resize storage that is not resizable
  txt: out.shape == input.shape and out.rank == input.rank
- cot: 'The error occurs because the value of ''dim'' provided is out of the valid
    range of dimensions for the input tensor. In this case, the input tensor has 4
    dimensions (from 0 to 3, or from -4 to -1 in reverse order), but the ''dim'' value
    provided is 5 which is out of this range. To prevent this error from happening
    again, we need to ensure that the ''dim'' value is always within the valid range
    for the given tensor. This can be done by generating a constraint for the ''dim''
    parameter as follows:'
  target: Dimension out of range (expected to be in range of [-4, 3], but got 5)
  txt: (dim >= -1) and (dim >= -len(input.shape) and dim < len(input.shape))
- cot: 'The error is caused because the output type of the tensor is expected to be
    float, but it is being cast to int. The values provided are {''input'': Tensor:TensorDType.complex64:[10,
    9, 8, 6], ''dim'': 0, ''correction'': 0, ''keepdim'': False, ''out'': Tensor:TensorDType.int32:[10,
    9, 8, 6]}. We see that the input tensor is of type complex64 and the output tensor
    is of type int32. This is causing the error as casting from complex64 to int32
    is not allowed. Therefore, Left : type(out) which is the type of output tensor
    should be corrected. It says that cannot be int, so Op : !=, and Right : int.
    Also, it should be float, so Op : ==, and Right : float.'
  target: result type Float can't be cast to the desired output type Int
  txt: type(out)!=int
- cot: 'The error occurs as the ''std'' and ''var'' operations only support floating
    point and complex dtypes. Let''s see what the args were. It seems the ''input''
    dtype is not in the supported list of [''float32'', ''float64'', ''complex64'',
    ''complex128'', ''float16'']. Therefore, the type(''input'') should be corrected.
    Operation : in, and Right : [''float32'', ''float64'', ''complex64'', ''complex128'',
    ''float16'']'
  target: std and var only support floating point and complex dtypes
  txt: type('input') in ['float32', 'float64', 'complex64', 'complex128', 'float16']
time_cost: 2506.35781621933
title: torch.std
tokens_used: 17513
trained: true
