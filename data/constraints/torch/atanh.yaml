constraints:
  input:
    default: null
    dtype: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
    init: false
    required: true
  out:
    default: null
    dtype: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
    init: false
    required: false
infered_history: []
infered_times: 16
package: torch
pass_rate: 1.0
rules:
- cot: The error is due to the attempt to resize a tensor that is not resizable. This
    may be because the input and output tensor dimensions are not compatible. The
    'input' tensor has dimensions [1, 3, 4, 10, 6, 2, 5, 4] and the 'out' tensor has
    dimensions [3, 10, 5]. Therefore, the dimensions of the 'out' tensor should match
    the dimensions of the 'input' tensor.
  target: Trying to resize storage that is not resizable
  txt: '''out''.size() == ''input''.size()'
- cot: The error is caused because the output type 'Float' cannot accept values from
    the 'ComplexDouble' type. To prevent this error, the 'input' type should be changed
    from 'ComplexDouble' to 'Float'. Let's see if we can relate this to the values
    provided. The 'input' and 'out' tensors have the same shape, but different types
    ('ComplexDouble' and 'Float' respectively). Therefore, the constraint would be
    that the 'input' tensor type should be the same as the 'out' tensor type.
  target: result type ComplexDouble can't be cast to the desired output type Float
  txt: (out.dtype == tf.float32) and (input.type == out.type)
time_cost: 629.8396844863892
title: torch.atanh
tokens_used: 8059
trained: true
