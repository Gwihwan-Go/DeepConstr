alias: torch.diag
constraints:
  diagonal:
    default: 0
    dtype: int
    init: false
    required: false
  input:
    default: null
    dtype: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
    init: false
    required: true
  out:
    default: null
    dtype: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
    init: false
    required: false
infered_history: []
infered_times: 10
package: torch
pass_rate: 0.98
rules:
- cot: 'The error is due to trying to resize storage that is not resizable. It seems
    to be related with ''out'' tensor. From the args, ''out'' tensor shape should
    be matched with the operation results. In this operation, the result shape would
    be determined by ''diagonal'' and ''input''. Therefore, ''out'' tensor shape should
    be [diagonal + input.rank]. Therefore, Left : out.shape, out.rank, Op : ==, Right
    : [diagonal + len(input.shape)].'
  target: Trying to resize storage that is not resizable
  txt: (out.rank==2) and ((out.shape == input.shape) and (out.rank == len(input.shape)
    + diagonal))
- cot: 'The error is due to a mismatch in the data types of the ''input'' tensor and
    the ''out'' tensor. The ''input'' tensor is of type float32, but the ''out'' tensor
    is of type int64. Therefore, Left : type(out) should be made to match the type
    of the ''input'' tensor. It says that it should be float, so Op : ==, and Right
    : type(input).'
  target: Expected out tensor to have dtype float, but got long int instead
  txt: type(out) == type(input)
time_cost: 499.8375132083893
title: torch.diag
tokens_used: 5486
