constraints:
  input:
    default: null
    dtype: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
    init: false
    required: true
  output_size:
    default: null
    dtype: int
    init: false
    required: true
package: torch
pass_rate: 1.0
rules:
- cot: 'The error is triggered because the function is trying to perform an operation
    on a 1-dimensional tensor. However, the tensor ''input'' in generated args is
    expected to have 2 to 3 dimensions. Let''s see what the args were. The ''input''
    tensor has more than 3 dimensions. Therefore, Left : len(input.shape), which is
    the number of dimensions of tensor ''input'', should be corrected. It says that
    should be equal to 2 or 3, so Op : ==, and Right : 2 or 3. Also, It implies that
    dimension cannot be 1, so Op : !=, and Right : 1.'
  target: 'Expected 2 to 3 dimensions, but got 1-dimensional tensor for argument #1
    ''self'' (while checking arguments for adaptive_avg_pool1d)'
  txt: len(input.shape) == 2 or len(input.shape) == 3
- cot: 'The error message indicates that the function mean() cannot infer the output
    dtype because the input dtype is not a floating point or complex dtype, but it
    got ''Long''. Therefore, Left : input.dtype which is the input data type should
    be corrected. It says that must be either a floating point or complex dtype, so
    Op : in, and Right : [''Float'', ''Complex'', ''Double'']. Also, it cannot be
    ''Long'', so Op : !=, and Right : ''Long''.'
  target: 'mean(): could not infer output dtype. Input dtype must be either a floating
    point or complex dtype. Got: Long'
  txt: (input.dtype in ['Float', 'Complex', 'Double'])
- cot: 'The error is due to the use of the "adaptive_avg_pool2d" function on a tensor
    with ''ComplexFloat'' datatype. This function is not implemented for ''ComplexFloat''
    datatype. Therefore, input.dtype should be corrected to a data type for which
    "adaptive_avg_pool2d" is implemented. Also, the output_size indicates the target
    output size, which should be less than or equal to the size of the input dimensions
    for the operation to be valid. So, Left : output_size, should be less than or
    equal to the size of each dimension of input tensor, so Op : <=, and Right : len(input[i])
    for each ''i'' in input dimensions.'
  target: '"adaptive_avg_pool2d" not implemented for ''ComplexFloat'''
  txt: input.dtype != "ComplexFloat"
- cot: 'The error states that the ''output_size'' argument in the function ''adaptive_avg_pool2d''
    is not satisfying the requirement of being greater than or equal to 0. The current
    ''output_size'' value is -1. Therefore, Left: output_size, Op: ''>='', and Right:
    0.'
  target: 'adaptive_avg_pool2d: elements of output_size must be greater than or equal
    to 0 but received'
  txt: output_size >= 0
title: torch.adaptive_avg_pool1d
