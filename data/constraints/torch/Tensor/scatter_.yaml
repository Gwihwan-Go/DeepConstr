constraints:
  dim:
    default: null
    dtype: int
    init: false
    required: true
  index:
    default: null
    dtype: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
    init: false
    required: true
  reduce:
    default: null
    dtype: str
    init: false
    required: false
  src:
    default: null
    dtype: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool,float
    init: false
    required: true
infered_history: []
infered_times: 26
package: torch
pass_rate: 0.0
rules:
- cot: 'The error might be due to an invalid dimension or mismatched sizes between
    the ''index'' tensor and ''src'' tensor. When reducing, the dimension ''dim''
    should be valid in both ''index'' and ''src'', which means the ''dim'' should
    be less than the ranks of ''index'' and ''src''. This can be written as `dim <
    len(index.shape)` and `dim < len(src.shape)`. Besides, the size of the dimension
    ''dim'' in the ''src'' tensor should match the size of the dimension ''dim'' in
    the ''index'' tensor, i.e., `src.shape[dim] == index.shape[dim]`. Thus, the constraints
    can be following:'
  target: '''reduce'''
  txt: (src.shape[dim] == len(index)) or ((index.dim == src.dim) or ((index.numel()
    > 0) or (dim < len(index.shape) and dim < len(src.shape) and src.shape[dim] ==
    index.shape[dim])))
- cot: 'The error indicates that negative dimensions are not allowed. The provided
    ''dim'' value is -10, which is not allowed. So, the Left : ''dim'' should be corrected.
    The operator that makes sense here would be ''greater than or equal to'', so Op
    : >=. The acceptable value for dimensions is non-negative, so Right : 0.'
  target: negative dimensions are not allowed
  txt: all(src[i] >= 0 for i in range(len(src)))
time_cost: 2298.567712545395
title: torch.Tensor.scatter_
tokens_used: 17352
trained: true
