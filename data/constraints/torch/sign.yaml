alias: torch.sign
constraints:
  input:
    default: null
    dtype: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
    init: false
    required: true
  out:
    default: null
    dtype: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
    init: false
    required: false
infered_history: []
infered_times: 18
package: torch
pass_rate: 0.97
rules:
- cot: "The error indicates that the input tensor is being resized incorrectly. The\
    \ 'input' tensor with the shape [6, 6, 6, 6, 1, 3, 4, 1, 3, 2] cannot be resized\
    \ to the 'out' tensor with the shape [9, 2, 2] because of incompatible dimensions.\
    \ Therefore, the constraint should be that the dimensions of 'input' and 'out'\
    \ should be the same. \nSo, Left : input.shape, Op : ==, Right : out.shape."
  target: Trying to resize storage that is not resizable
  txt: input.shape == out.shape
- cot: 'The error was due to an inconsistency in the data type of ''input'' and ''out''.
    ''input'' has a data type of float32, while ''out'' is float16. The function was
    expecting both ''input'' and ''out'' to be in the same data type. So, the constraints
    should be that the data type of ''input'' and ''out'' should be the same. Therefore,
    Left : input.dtype(), which should match the data type of ''out'', so Op : ==,
    and Right : out.dtype().'
  target: Found dtype Half but expected Float
  txt: input.dtype() == out.dtype()
time_cost: 884.0433745384216
title: torch.sign
tokens_used: 10248
trained: true
