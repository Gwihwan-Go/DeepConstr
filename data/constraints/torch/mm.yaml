alias: torch.mm
constraints:
  input:
    default: 'null'
    dtype: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
    init: false
    required: true
  mat2:
    default: 'null'
    dtype: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
    init: false
    required: true
  out:
    default: 'null'
    dtype: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
    init: false
    required: false
infered_history: []
infered_times: 7
package: torch
pass_rate: 0.96
rules:
- cot: 'The error is raised because the datatype of the ''out'' tensor is not as expected.
    The ''out'' tensor was expected to be of float type but it is of int32 type. So,
    the data type of ''out'' tensor needs to be corrected. Therefore, Left : out.dtype,
    which is the type of tensor ''out''. It says that the expected datatype is float,
    so Op : ==, and Right : float.'
  target: Expected out tensor to have dtype float, but got c10::Half instead
  txt: out.dtype==float
- cot: 'The error is triggered because the datatypes of m1 and m2 are not the same.
    It expects m1 and m2 to have the same datatype. In this case, m1 and m2 correspond
    to ''input'' and ''mat2''. Let''s see what the args were. It seems the datatypes
    of ''input'' and ''mat2'' are not same, so they should be corrected. Therefore,
    Left : input.dtype. Op : ==, and Right : type(mat2).'
  target: 'expected m1 and m2 to have the same dtype, but got: float != short int'
  txt: input.dtype == mat2.dtype
- cot: "The error is because the shapes of mat1 and mat2 are not suitable for multiplication.\
    \ In matrix multiplication, the number of columns in the first matrix must be\
    \ equal to the number of rows in the second matrix. But here, mat1 and mat2 both\
    \ have shapes of (8x10), hence they cannot be multiplied. \n\nLet's see what the\
    \ args were. It seems the size of the second dimension of 'input', which corresponds\
    \ to 'mat1', should match the size of the first dimension of 'mat2', and the resulting\
    \ matrix 'out' should have a shape that is the number of rows of 'mat1' by the\
    \ number of columns of 'mat2'. Therefore,"
  target: mat1 and mat2 shapes cannot be multiplied (8x10 and 8x10)
  txt: input.shape[1] == mat2.shape[0]
- cot: 'The error is related to attempt to resize a storage which is not resizable.
    From the values given, ''input'', ''mat2'', and ''out'' are tensors. However,
    the ''out'' tensor has mismatch in shape compared to ''input'' and ''mat2'', which
    could be causing the operation to attempt resizing. Therefore, the shape of ''out''
    tensor needs to match the shape of ''input'' or ''mat2'' tensor. Hence, Left:
    ''out.shape'', Op: ''=='', and Right: ''input.shape'' or ''mat2.shape''.'
  target: Trying to resize storage that is not resizable
  txt: ('out'.shape == ['input'.shape[0], 'mat2'.shape[1]]) or (out.shape == input.shape
    or out.shape == mat2.shape)
- cot: 'The error message "self must be a matrix" generally indicates that the tensor
    does not have the correct dimensions. A matrix should be a 2D tensor. Looking
    at the tensors ''input'', ''mat2'', and ''out'', ''input'' and ''mat2'' have three
    dimensions while ''out'' has five dimensions. Therefore, the Left : input.dim
    and mat2.dim should be corrected to 2, for them to be considered as a matrix.
    Ops : ''=='', Right : 2. Also, out.dim should be corrected to 2, Ops : ''=='',
    Right : 2.'
  target: self must be a matrix
  txt: input.dim == 2
- cot: "The error is triggered because 'self' must be a matrix. In this context, 'self'\
    \ usually refers to the first argument of a method, which is 'input'. A matrix\
    \ usually needs at least 2 dimensions. However, the current 'input' has 2 dimensions\
    \ which seems to be correct. To determine the issue, we might need more information\
    \ about the specific function or method triggering this error. \n\nAnother possible\
    \ issue could be with 'mat2'. 'mat2' is a 3-dimensional tensor. If 'mat2' should\
    \ be a matrix, it should have only 2 dimensions. Therefore, one of the possible\
    \ constraints could be that the dimension of 'mat2' should be 2."
  target: mat2 must be a matrix
  txt: (input.dim() >= 2) and (mat2.dim == 2)
time_cost: 1155.6470942497253
title: torch.mm
tokens_used: 4218
