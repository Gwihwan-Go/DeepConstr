alias: torch.amax
constraints:
  dim:
    default: 'null'
    dtype: int
    init: false
    required: true
  input:
    default: 'null'
    dtype: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
    init: false
    required: true
  keepdim:
    default: 'false'
    dtype: bool
    init: false
    required: false
  out:
    default: 'null'
    dtype: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
    init: false
    required: false
infered_history: []
infered_times: 27
package: torch
pass_rate: 0.58
rules:
- cot: 'The error appears because the dimension provided is out of the valid range
    for the given tensor. In this case, the valid range for dimension is between -1
    and 0, but it received -2. To avoid this error and generate constraints that do
    not trigger it, we need to ensure that the "dim" value is always within this valid
    range.


    The constraint for the ''dim'' parameter can be expressed as:'
  target: Dimension out of range (expected to be in range of [-1, 0], but got -2)
  txt: (dim >= -1 and dim <= 0) or (dim >= -len(input.shape) and dim < len(input.shape))
    or (dim >= -1 and dim <= 0)
- cot: 'Error is triggered because of resizing storage which is not resizable. Here,
    the ''out'' tensor seems to be the storage. It appears that the ''out'' tensor''s
    shape should match the operation result''s shape. In this situation, the result
    shape would be determined by the ''dim'' and ''keepdim'' values alongside the
    ''input'' tensor''s shape. If ''keepdim'' is False, the dimension specified by
    ''dim'' is reduced and hence, the shape of ''out'' should be the shape of ''input''
    without the ''dim'' dimension. Therefore, left : out.shape, out.rank op : == right
    : input.shape[:dim] + input.shape[dim+1:], len(input.shape) - 1 (if keepdim is
    False)'
  target: Trying to resize storage that is not resizable
  txt: (out.shape[dim] == 1) or ((len(input) == len(out)) or (all(out.shape[i] ==
    input.shape[i] for i in range(dim))))
- cot: 'The error occurs because the data types of the ''input'' and ''out'' tensors
    do not match. The ''input'' tensor is of type float32 while the ''out'' tensor
    is of type int32. To prevent this error in the future, we need to ensure that
    the data types of the ''input'' and ''out'' tensors are the same.


    The constraint can be expressed as:'
  target: Expected the dtype for input and out to match, but got Float for input's
    dtype and Int for out's dtype.
  txt: input.dtype == out.dtype
- cot: 'The error is due to an invalid reduction dimension. What the args were? The
    function is trying to perform a reduction operation on dimension 0 of the input
    tensor, but the size of that dimension is 0. Reduction operations require that
    the size of the dimension on which they are performed to be non-zero. Therefore,
    the constraint should be that the size of the dimension specified in ''dim'' should
    not be 0. So, Left : input[dim], op : >, right : 0.'
  target: 'amax(): Expected reduction dim 0 to have non-zero size.'
  txt: input.shape[dim] > 0
time_cost: 3728.9469192028046
title: torch.amax
tokens_used: 17658
trained: true
