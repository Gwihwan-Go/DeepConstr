constraints:
  align_corners:
    default: false
    dtype: bool
    init: false
    required: false
  antialias:
    default: false
    dtype: bool
    init: false
    required: false
  input:
    default: null
    dtype: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
    init: false
    required: true
  mode:
    default: nearest
    dtype: Literal['linear', 'bilinear', 'bicubic', 'trilinear', 'area']
    init: false
    required: false
  recompute_scale_factor:
    default: null
    dtype: bool
    init: false
    required: false
  scale_factor:
    default: null
    dtype: float
    init: false
    required: false
infered_history: []
infered_times: 19
package: torch
pass_rate: 0.73
rules:
- cot: 'The error is triggered because the output height and width are negative. Let''s
    see what the args were. The scale factor is negative, which is causing the output
    size to be negative. Therefore, the scale factor should be greater than 0. Also,
    the input height and width should be greater than 0.


    Constraints:'
  target: 'Input and output sizes should be greater than 0, but got input (H: 9, W:
    8) output (H: -10, W: -9)'
  txt: scale_factor > 0
- cot: 'The error is due to the input tensor''s data type being ''ComplexFloat'' which
    is not supported by the function ''compute_indices_weights_cubic''. From the given
    values, ''input'' is the tensor with ''ComplexFloat'' data type. Therefore, the
    data type of ''input'', which is input.dtype, needs to be corrected. It implies
    that the data type cannot be ''ComplexFloat'', so Op : !=, and Right : ''ComplexFloat''.'
  target: '"compute_indices_weights_cubic" not implemented for ''ComplexFloat'''
  txt: input.dtype != 'ComplexFloat'
- cot: 'The error message indicates that the anti-alias option is only supported for
    bilinear and bicubic modes. The mode in the provided values is ''bicubic'', but
    the ''antialias'' flag is set to True. In order to prevent this error, we must
    ensure that if ''antialias'' is True, the ''mode'' can only be ''bilinear'' or
    ''bicubic''. Therefore, the logical relationship constraint would be:'
  target: Anti-alias option is only supported for bilinear and bicubic modes
  txt: antialias != True or (mode in ['bilinear', 'bicubic'])
- cot: "The error is not specified, but based on the given values, there could be\
    \ several constraints to consider for the input. For instance, the 'input' tensor\
    \ is of type float32 with a shape of [10, 9], and the 'scale_factor' is a float\
    \ of 2.5973172. \n\nFirst, the 'mode' is set to 'bicubic', which requires the\
    \ input to be a 4D tensor (batch, channels, height, width). Therefore, the number\
    \ of dimensions of 'input' should be 4, so Left : len(input.shape), Op : ==, and\
    \ Right : 4."
  target: Input Error Only 3D, 4D and 5D input Tensors supported (got 1D) for the modes
  txt: (len(input.shape) >=3 and len(input.shape) <=5)
- cot: "The error is not specified, but based on the given values, there could be\
    \ several constraints to consider for the input. For instance, the 'input' tensor\
    \ is of type float32 with a shape of [10, 9], and the 'scale_factor' is a float\
    \ of 2.5973172. \n\nFirst, the 'mode' is set to 'bicubic', which requires the\
    \ input to be a 4D tensor (batch, channels, height, width). Therefore, the number\
    \ of dimensions of 'input' should be 4, so Left : len(input.shape), Op : ==, and\
    \ Right : 4."
  target: Input Error Only 3D, 4D and 5D input Tensors supported (got 1D) for the modes
  txt: (mode != 'linear') or (mode in ['linear'] and len(input.shape) ==3)
- cot: "The error is not specified, but based on the given values, there could be\
    \ several constraints to consider for the input. For instance, the 'input' tensor\
    \ is of type float32 with a shape of [10, 9], and the 'scale_factor' is a float\
    \ of 2.5973172. \n\nFirst, the 'mode' is set to 'bicubic', which requires the\
    \ input to be a 4D tensor (batch, channels, height, width). Therefore, the number\
    \ of dimensions of 'input' should be 4, so Left : len(input.shape), Op : ==, and\
    \ Right : 4."
  target: Input Error Only 3D, 4D and 5D input Tensors supported (got 1D) for the modes
  txt: (mode != 'bicubic') or (mode in ['bicubic'] and len(input.shape) ==4)
- cot: "The error is not specified, but based on the given values, there could be\
    \ several constraints to consider for the input. For instance, the 'input' tensor\
    \ is of type float32 with a shape of [10, 9], and the 'scale_factor' is a float\
    \ of 2.5973172. \n\nFirst, the 'mode' is set to 'bicubic', which requires the\
    \ input to be a 4D tensor (batch, channels, height, width). Therefore, the number\
    \ of dimensions of 'input' should be 4, so Left : len(input.shape), Op : ==, and\
    \ Right : 4."
  target: Input Error Only 3D, 4D and 5D input Tensors supported (got 1D) for the modes
  txt: (mode != 'trilinear') or (mode in ['trilinear'] and len(input.shape) ==5)
time_cost: 1666.597903728485
title: torch.nn.functional.interpolate
tokens_used: 13444
trained: true
