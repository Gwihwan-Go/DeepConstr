constraints:
  input:
    default: null
    dtype: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
    init: false
    required: true
  output_size:
    default: null
    dtype: int,list[int]
    init: false
    required: true
infered_history: []
infered_times: 32
package: torch
pass_rate: 0.92
rules:
- cot: 'The error is due to the input tensor having zero size for non-batch dimensions,
    as the function adaptive_avg_pool2d() expects non-zero size for these dimensions.
    Let''s see what the args were. The input tensor has sizes [0, 0, 0, 0] and the
    output_size is 3. Therefore, all dimensions of input after the batch dimension
    (dimension 0) should have a non-zero size. We can generate the following constraints:'
  target: 'adaptive_avg_pool2d(): Expected input to have non-zero size for non-batch
    dimensions, but input has sizes [0, 0, 0, 0] with dimension 2 being empty'
  txt: (output_size > 0)
- cot: 'The error indicates that the ''output_size'' for the function ''adaptive_avg_pool2d''
    is not as expected. The function requires the ''output_size'' to be 2, but it
    received [500] which is 1. Therefore, the Left : len(output_size), Op : ''=='',
    and Right : 2. Also, the ''input'' is a tensor with a shape of [9, 8, 6] which
    is 3D. So it satisfies the requirement for ''adaptive_avg_pool2d''.'
  target: 'adaptive_avg_pool2d: output_size must be 2'
  txt: len(output_size) == 2
- cot: 'Error arises because the input tensor''s dimension is not matching the requirement.
    The function adaptive_avg_pool2d() expects 3D or 4D tensor, but the input tensor
    is 2D. Let''s see what the args were. The input tensor is of shape [10, 9]. Therefore,
    the dimension of the input tensor, which is input.ndims(), should be corrected.
    Therefore, Left : input.ndims(). It says that expected 3 or 4, so Op : ==, and
    Right : 3 or 4. Also, it implies that dimension cannot be 2, so Op : !=, and Right
    : 2.'
  target: 'adaptive_avg_pool2d(): Expected 3D or 4D tensor, but got [10, 9]'
  txt: input.ndims() == 3 or input.ndims() == 4
- cot: 'The error is triggered because the data type of the input tensor to the mean()
    function is int, while the function expects the input tensor to be of a floating
    point or complex data type. Looking at the argument values, the input tensor is
    of dtype int32 and the desired output size is 1. Therefore, the data type of the
    input tensor should be a floating point or complex data type. Left : type(input),
    op : in, right : [float, complex]'
  target: 'mean(): could not infer output dtype. Input dtype must be either a floating
    point or complex dtype. Got: Int'
  txt: type(input) in [float, complex]
- cot: 'The error is due to the use of the ''adaptive_avg_pool2d'' function with a
    complex64 data type, which is not supported. The args here are ''input'' and ''output_size''.
    ''input'' is a tensor with a complex64 data type which is causing the issue. Therefore,
    we need to ensure that the data type of ''input'' is not complex64. Hence, Left
    : input.dtype, Op : !=, and Right : complex64.'
  target: '"adaptive_avg_pool2d" not implemented for ''ComplexFloat'''
  txt: input.dtype != complex64
time_cost: 1285.7961115837097
title: torch.nn.functional.adaptive_avg_pool2d
tokens_used: 18546
trained: true
