constraints:
  ignore_index:
    default: -100
    dtype: int
    init: false
    required: false
  input:
    default: null
    dtype: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
    init: false
    required: true
  label_smoothing:
    default: 0.0
    dtype: float
    init: false
    required: false
  reduce:
    default: true
    dtype: bool
    init: false
    required: false
  reduction:
    default: mean
    dtype: Literal["none", "mean", "sum"]
    init: false
    required: false
  size_average:
    default: true
    dtype: bool
    init: false
    required: false
  target:
    default: null
    dtype: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
    init: false
    required: true
  weight:
    default: null
    dtype: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
    init: false
    required: false
infered_history: []
infered_times: 47
package: torch
pass_rate: 0.0
rules:
- cot: 'The error is caused because the value of label_smoothing is not within the
    correct range. According to the error message, label_smoothing must be between
    0.0 and 1.0, but in the provided values, it''s 7.45911. So, the Left : label_smoothing
    should be corrected. To generate the constraints that do not trigger this error,
    we need to confirm that label_smoothing is greater than or equal to 0.0 and less
    than or equal to 1.0. So, for the lower limit, Op : ''>='', Right : 0.0 and for
    the upper limit, Op : ''<='', Right : 1.0.'
  target: 'label_smoothing must be between 0.0 and 1.0. Got: 7.45911'
  txt: label_smoothing<=1.0
- cot: 'The error is caused by a mismatch in the batch sizes of the input and target
    tensors. The batch size is represented by the first dimension in each tensor.
    In order to prevent this error, the batch sizes of both tensors should be the
    same. Therefore, the constraints to prevent this error are:'
  target: Expected input batch_size (8) to match target batch_size (6).
  txt: (input.shape == target.shape)
- cot: 'The error is due to an incorrect data type for the ''target'' tensor value.
    It expects a floating point type, but got an integer. Let''s see what the args
    were? The target tensor is of type int32, which should be changed to a floating
    point type such as float32 or float64. Therefore, Left : target.dtype. Op : ==,
    Right : tf.float32 or tf.float64. Also, it implies that the target should not
    be of integer type. So, Left : target.dtype. Op : !=, Right : tf.int32.'
  target: Expected floating point type for target with class probabilities, got Int
  txt: target.dtype == tf.float32 or target.dtype == tf.float64
time_cost: 7501.221479415894
title: torch.nn.functional.cross_entropy
tokens_used: 30534
trained: true
