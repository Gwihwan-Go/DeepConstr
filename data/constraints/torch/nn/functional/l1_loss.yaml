constraints:
  input:
    default: null
    dtype: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
    init: false
    required: true
  reduce:
    default: null
    dtype: bool
    init: false
    required: false
  reduction:
    default: mean
    dtype: Literal['none', 'mean', 'sum']
    init: false
    required: false
  size_average:
    default: null
    dtype: bool
    init: false
    required: false
  target:
    default: null
    dtype: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
    init: false
    required: true
infered_history: []
infered_times: 7
package: torch
pass_rate: 0.95
rules:
- cot: 'Error is triggered because size of tensors at non-singleton dimension 8 doesn''t
    match. What the args were? two tensors ''input'' and ''target'' matching problem
    at non-singleton dimension looks like broadcasting request. Broadcasting in tensor
    operations requires that the trailing dimensions of the tensors are either 1 or
    the same. We start from the last dimension because broadcasting aligns dimensions
    from the end. In this case, the 8th dimension of ''input'' is 3 and ''target''
    is 2, they are not matching. Therefore, we can revise the constraints as follows:'
  target: The size of tensor a (3) must match the size of tensor b (2) at non-singleton
    dimension 8
  txt: all(input.shape[i] == target.shape[i] or input.shape[i] == 1 or target.shape[i]
    == 1 for i in range(-1, -min(len(input.shape), len(target.shape))-1, -1))
time_cost: 934.397479057312
title: torch.nn.functional.l1_loss
tokens_used: 4918
trained: true
