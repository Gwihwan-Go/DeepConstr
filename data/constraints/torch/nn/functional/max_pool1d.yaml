alias: torch.nn.functional.max_pool1d
constraints:
  ceil_mode:
    default: 1
    dtype: bool
    init: false
    required: false
  input:
    default: null
    dtype: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
    init: false
    required: true
  kernel_size:
    default: null
    dtype: list[int]
    init: false
    required: true
  padding:
    default: null
    dtype: list[int]
    init: false
    required: true
  return_indices:
    default: 1
    dtype: bool
    init: false
    required: false
  stride:
    default: null
    dtype: list[int]
    init: false
    required: true
infered_history: []
infered_times: 70
package: torch
pass_rate: 0.28
rules:
- cot: 'The error arises because stride in the args is set to 0. The stride should
    not be zero for this operation. Therefore, Left : stride which is the stride value
    should be corrected. It says that cannot be 0, so Op : !=, and Right : 0.'
  target: stride should not be zero
  txt: stride != 0
- cot: 'The error suggests that the padding is more than half of the kernel size.
    Let''s see what the args were. It seems that ''kernel_size'' is 10 and ''padding''
    is 28, which violates the constraint where padding should be at most half of the
    kernel size. Therefore, Left : padding. Operation : <=, and Right : kernel_size/2.'
  target: pad should be at most half of kernel size, but got pad=28 and kernel_size=10
  txt: padding <= kernel_size/2
- cot: 'From the error message, it seems that the padding is larger than half of the
    kernel size. This is not allowed in the max_pool1d() function. The padding should
    be at most half of the kernel size. The input values show that padding=29 and
    kernel_size=10, which violates this rule. Therefore, the constraint should be:'
  target: max_pool1d() padding should be at most half of kernel size, but got padding=29
    and kernel_size=10
  txt: padding < min(input.shape)
- cot: 'The error is due to unsupported data type ''ComplexFloat'' from args for "max_pool1d_impl".
    It seems ''input'' tensor has the ComplexFloat data type, which is not supported.
    Therefore, the dtype of ''input'' should be corrected. It says that ''ComplexFloat''
    is not implemented, so Op : !=, and Right : ''ComplexFloat''. Also, the kernel_size
    must be less than or equal to the size of the input tensor in each dimension.
    Therefore, Left : kernel_size, Op : <=, Right : input.shape. Moreover, stride
    value should be less than the input size. So, Left : stride, Op : <, Right : input.shape.'
  target: '"max_pool1d_impl" not implemented for ''ComplexFloat'''
  txt: (input.dtype != 'Long') and (input.dtype != 'ComplexFloat')
- cot: 'The error is due to the ''kernel_size'' in the ''max_pool1d()'' function.
    What the args were? The function requires a ''kernel_size'' greater than zero,
    but it received ''-500''. Therefore, ''kernel_size'' needs to be corrected. It
    says it should be greater than zero, so Op : > and Right : 0 respectively.'
  target: max_pool1d() kernel_size must be greater than zero, but got -500
  txt: kernel_size>0
- cot: "The error occurs because the input tensor has more dimensions than expected.\
    \ Let's examine given args. The 'input' tensor is a 10-D tensor, but the function\
    \ max_pool1d expects a tensor with 2 to 3 dimensions. Therefore, to avoid this\
    \ error, the dimensionality of the 'input' tensor should be within the valid range.\
    \ \n\nThe constraint for the 'input' tensor can be expressed as:"
  target: 'Expected 2 to 3 dimensions, but got 10-dimensional tensor for argument
    #1 ''self'' (while checking arguments for max_pool1d)'
  txt: len(input.shape) >= 2 and len(input.shape) <= 3
- cot: "The error is happening because the kernel_size is expected to be an integer,\
    \ a list of integers, or a tuple of integers of size 1, but an empty list was\
    \ provided. So, a constraint to prevent this error would be to ensure that the\
    \ kernel_size is an integer or a list/tuple of length 1. \n\nThe constraints for\
    \ the 'kernel_size' parameter can be expressed as:"
  target: max_pool1d() kernel_size must be an int, list of ints or tuple of ints of
    size 1 but got size 0
  txt: (len(padding) == 1) and ((len(stride) == 1) and (len(kernel_size) == 1))
- cot: 'Error is triggered because of negative padding. Let''s see what the args were.
    It seems padding has a negative value. Therefore, Left : padding. It implies that
    negative values are problem., so Op : >=, and Right : 0.'
  target: 'pad must be non-negative, but got pad: -1'
  txt: padding >= 0
- cot: 'The error is triggered because the calculated output size is negative, which
    is not possible. Let''s see what the args were. The input tensor has dimensions
    [10, 9], the kernel size is [500], stride is [20], and padding is [8]. The output
    size is calculated based on these parameters. Considering the formula for the
    output size in convolution operation (W - K + 2P)/S + 1, where W is the input
    size, K is the kernel size, P is the padding, and S is the stride. The output
    size cannot be negative. Therefore, we can revise the constraints as follows:'
  target: 'Given input size: (10x1x9). Calculated output size: (10x1x-22). Output
    size is too small'
  txt: (input.shape[-1] - kernel_size[0] + 2*padding[0])/stride[0] + 1 > 0
time_cost: 2840.3701345920563
title: torch.nn.functional.max_pool1d
tokens_used: 45635
trained: true
