alias: torch.nn.functional.adaptive_max_pool2d
constraints:
  input:
    default: null
    dtype: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
    init: false
    required: true
  output_size:
    default: null
    dtype: int,list[int]
    init: false
    required: true
  return_indices:
    default: 1
    dtype: bool
    init: false
    required: false
infered_history: []
infered_times: 25
package: torch
pass_rate: 0.83
rules:
- cot: 'Error is triggered because of wrong tensor dimension. It expects to have 3D
    or 4D tensor. Let''s see what the args were. It seems ''input'' tensor has 1 dimension,
    and is the problem. so the number of dimensions of ''input'' should be corrected,
    which is ''input''.ndims(). Therefore, Left : ''input''.ndims(). It says that
    expected 3D or 4D, so Op : ==, and Right : 3 or 4. Also, It implies that dimension
    cannot be 1, so Op : !=, and Right : 1.'
  target: 'adaptive_max_pool2d(): Expected 3D or 4D tensor, but got: [7]'
  txt: '''input''.ndims() == 3'
- cot: 'The error is caused because the size of output is not 2-dimensional. The provided
    argument is ''output_size'': [500], which is 1-dimensional. Adaptive pooling operations,
    such as adaptive_max_pool2d(), require the output size to be a 2-dimensional tensor.
    So, the constraint should correct the ''output_size'' argument to be a 2-dimensional
    tensor. Therefore, the constraint that needs to be generated is:'
  target: 'adaptive_max_pool2d(): internal error: output_size.size() must be 2'
  txt: len(output_size) == 2
- cot: 'The error here is due to the dtype of the input tensor which is ''Int''. The
    ''adaptive_max_pool2d'' function is not implemented for ''Int''. Therefore, the
    dtype of the input tensor should be changed. Also, the ''output_size'' indicates
    that the output tensor should have a size of 6, but the input tensor has 4 dimensions,
    which could be causing a problem. Therefore, the number of dimensions of the input
    tensor should match the output_size. Left : input.dtype and input.rank, Op : !=
    and ==, Right : ''Int'' and output_size.'
  target: '"adaptive_max_pool2d" not implemented for ''Int'''
  txt: input.dtype != 'Int'
- cot: 'The error is due to the use of a ''Half'' data type, which is not supported
    by the ''adaptive_max_pool2d'' function. Therefore, the ''input'' tensor''s data
    type should not be ''Half''. Op : !=, and Right : ''Half''. Also, ''return_indices''
    is set to True, but it''s not supported by ''adaptive_max_pool2d'' function. So
    ''return_indices'' should be False. Op : ==, and Right : False.'
  target: '"adaptive_max_pool2d" not implemented for ''Half'''
  txt: (input.dtype != 'Half')
time_cost: 760.9289855957031
title: torch.nn.functional.adaptive_max_pool2d
tokens_used: 14227
trained: true
