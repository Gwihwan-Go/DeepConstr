constraints:
  input:
    default: null
    dtype: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
    init: false
    required: true
  padding:
    default: null
    dtype: int,list[int]
    init: true
    required: true
infered_history: []
infered_times: 32
package: torch
pass_rate: 0.43
rules:
- cot: 'The error is triggered because padding is applied on a tensor with a dimension
    that is not supported. Given the args, the tensor dimension is 5D and the padding
    is 5. Therefore, the Left : len(input.shape), which is the tensor''s dimension,
    should be corrected. It says that 2D, 3D, 4D, 5D padding are supported, so Op
    : in, and Right : [2, 3, 4, 5]. Also, the padding should not be constant, so Left
    : padding, Op : !=, Right : constant value.'
  target: Only 2D, 3D, 4D, 5D padding with non-constant padding are supported for
    now
  txt: (len(padding) in [2,3,4,5]) and ((len(input.shape) in [2, 3, 4, 5]) and ((len(padding)
    == input.rank-1) or ((input.rank == 1) or (((len(padding) == len(input.shape)))
    and ((len(input.shape) in [2, 3, 4, 5]) and ((len(padding) in [2,3,4,5]) or ((len(padding)
    == input.rank-1) and (len(input.shape) in [2, 3, 4, 5]))))))))
- cot: 'Error is triggered because of incorrect padding length. Let''s see what the
    args were. The padding size is 5 which is not divisible by 2. So, I guess the
    length of padding size should be divisible by 2. Therefore, left : len(padding)
    mod 2, op : ==, right : 0, 0'
  target: Padding length must be divisible by 2
  txt: len(padding) % 2 == 0
time_cost: 3901.1215748786926
title: torch.nn.ReplicationPad2d
tokens_used: 19912
trained: true
