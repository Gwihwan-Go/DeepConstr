constraints:
  alpha:
    default: '1'
    dtype: int
    init: false
    required: false
  beta:
    default: '1'
    dtype: int
    init: false
    required: false
  input:
    default: 'null'
    dtype: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
    init: false
    required: true
  out:
    default: 'null'
    dtype: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
    init: false
    required: false
  vec1:
    default: 'null'
    dtype: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
    init: false
    required: true
  vec2:
    default: 'null'
    dtype: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
    init: false
    required: true
infered_history: []
infered_times: 23
package: torch
pass_rate: 0.08
rules:
- cot: 'The error is caused by the mismatch in data types between the result and the
    expected output. The output type is expected to be Float, but the result is of
    type ComplexFloat. From the given args, we can see that ''vec2'' is of type ComplexFloat
    which could be causing the issue. Therefore, we should ensure that ''vec2'' is
    not of type ComplexFloat to prevent this error. So, Left : type(vec2), Op : !=,
    Right : ComplexFloat. Also, the output is expected to be of type Float. So, we
    should ensure that ''input'', ''out'', ''vec1'', and ''vec2'' should be of type
    Float. Therefore, Left : type(input), type(out), type(vec1), type(vec2), Op :
    ==, Right : Float.'
  target: result type ComplexDouble can't be cast to the desired output type Double
  txt: type(vec2)!=ComplexFloat
- cot: 'The error is triggered because the expanded size of the tensor doesn''t match
    with the existing size at non-singleton dimension 1. From the given values, it
    seems that the dimension size of the tensor is not matching the target size. Therefore,
    the constraint would be that the size of the tensor dimension should match the
    target size. The value of vec1 (length 2) and vec2 (length 6) seems to be the
    target sizes and the size of input tensor (TensorDType.float32:[9, 7]) is not
    matching with these. Therefore, Left : len(vec1), len(vec2). Op : ==, and Right
    : input.shape[1], input.shape[2]'
  target: 'The expanded size of the tensor (6) must match the existing size (7) at
    non-singleton dimension 1.  Target sizes: [2, 6].  Tensor sizes: [9, 7]'
  txt: (len(input) == len(vec1) or len(input) == len(vec2)) or ((vec2.dim <= len(input))
    or (len(vec2) == input.shape[2]))
- cot: 'The error is due to the fact that the ''vec1'' tensor is of higher dimension
    than expected. The function is expecting a 1-D tensor, but a 5-D tensor is given.
    Therefore, the tensor ''vec1'' should be of 1-D. The constraint for the ''vec1''
    tensor can be expressed as:'
  target: 'addr: Expected 1-D argument vec1, but got 5-D'
  txt: (len(vec2.shape) == 1) and (len(vec1.shape) == 1)
time_cost: 2682.3712768554688
title: torch.addr
tokens_used: 16432
trained: true
