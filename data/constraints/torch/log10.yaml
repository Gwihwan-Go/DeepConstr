alias: torch.log10
constraints:
  input:
    default: null
    dtype: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
    init: false
    required: true
  out:
    default: null
    dtype: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
    init: false
    required: false
infered_history: []
infered_times: 18
package: torch
pass_rate: 1.0
rules:
- cot: 'The error is due to the mismatch in dimensions of ''input'' and ''out'' tensors.
    The ''out'' tensor size should be the same as the ''input'' tensor size. Here,
    the size of ''input'' tensor is [6, 8, 6, 6, 1] and that of ''out'' tensor is
    [8, 2, 6, 6, 1]. So, the constraint would be that the shape of ''out'' tensor
    should be the same as the ''input'' tensor. Therefore, Left : out.shape, Op :
    ==, Right : input.shape.'
  target: Trying to resize storage that is not resizable
  txt: out.shape == input.shape
- cot: 'The error is triggered because the result type Float cannot be cast to the
    desired output type Char. Looking at the input and output values, the dtype of
    ''input'' is int32 and the dtype of ''out'' is int8. To prevent this error, the
    dtype of ''out'' should be changed to match the dtype of ''input'' or vice versa.
    Left : type(out), op : ==, comparator : type(input)'
  target: result type Float can't be cast to the desired output type Char
  txt: ((input.dtype == ComplexFloat) and (type(input)==type(out))) or ((type(input)==type(out))
    and (type(out)=='Float')) or ((input.dtype == ComplexFloat) and (type(input)==type(out)))
time_cost: 843.7711143493652
title: torch.log10
tokens_used: 9672
trained: true
