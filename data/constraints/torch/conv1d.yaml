constraints:
  bias:
    default: null
    description: "optional bias of shape :math:`(\text{out\\_channels})`"
    dtype: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
    init: false
    required: false
  dilation:
    default: 1
    description: the spacing between values in the input tensor
    dtype: int
    init: false
    required: false
  groups:
    default: 1
    description: split input into groups
    dtype: int
    init: false
    required: false
  input:
    default: null
    description: "input tensor of shape :math:`(\text{minibatch} , \text{in\\_channels}\
      \ , iW)`"
    dtype: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
    init: false
    required: true
  padding:
    default: 0
    description: implicit paddings on both sides of the input
    dtype: list[int]
    init: false
    required: false
  stride:
    default: 1
    description: the stride of the convolving kernel
    dtype: list[int]
    init: false
    required: false
  weight:
    default: null
    description: "filters of shape :math:`(\text{out\\_channels} , \\frac{\text{in\\\
      _channels}}{\text{groups}} , kW)`"
    dtype: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
    init: false
    required: true
infered_history: []
infered_times: 78
package: torch
pass_rate: 0.2
rules:
- cot: "The error is due to the mismatch of the dimensions of the 'input' tensor and\
    \ the 'weight' tensor. The expected dimension of the input is 8 (as the weight\
    \ tensor is of 8 dimensions) but got 3-dimensional input. \nThe relationship constraints\
    \ should be, the 'input' tensor should have the same number of dimensions as the\
    \ 'weight' tensor. To prevent this error from occurring again, we should ensure\
    \ the dimensions of the 'input' and 'weight' tensors are equal. The logical relationship\
    \ can be defined as follows:"
  target: Expected 8-dimensional input for 8-dimensional weight [2, 6, 6, 8, 1, 7,
    2, 6], but got 3-dimensional input of size [3, 2, 8] instead
  txt: input.dim == weight.dim
- cot: 'Error is triggered because of negative padding. It expects to have not negative
    padding. Let''s see what the args were. In the values, ''padding'' has a negative
    value. It does not inform us which padding value to correct, so <symbol> or all(<symbol>)
    should be corrected, which is padding or all(padding). Therefore, Left : padding
    or all(padding). It implies that negative values are problem., so Op : >=, and
    Right : 0.'
  target: negative padding is not supported
  txt: (len(padding) == input.rank) or (all(padding[i] >= 0 for i in range(len(padding))))
- cot: "The error is triggered because the input type (torch.FloatTensor) and bias\
    \ type (torch.HalfTensor) are not the same. Therefore, the data types of input\
    \ and bias should be the same to prevent this error. The constraints that could\
    \ be generated to prevent this error are as follows: \nLeft : type(input), op\
    \ : ==, comparator : type(bias)"
  target: Input type (torch.FloatTensor) and bias type (torch.HalfTensor) should be
    the same or input should be a MKLDNN tensor and bias is a dense tensor
  txt: type(input) == type(bias)
time_cost: 8183.67614197731
title: torch.conv1d
tokens_used: 45188
trained: true
