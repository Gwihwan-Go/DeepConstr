alias: torch.stft
constraints:
  center:
    default: true
    dtype: bool
    init: false
    required: false
  hop_length:
    default: null
    dtype: int
    init: false
    required: false
  input:
    default: null
    dtype: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
    init: false
    required: true
  n_fft:
    default: null
    dtype: int
    init: false
    required: true
  normalized:
    default: false
    dtype: bool
    init: false
    required: false
  onesided:
    default: true
    dtype: bool
    init: false
    required: false
  return_complex:
    default: null
    dtype: bool
    init: false
    required: false
  win_length:
    default: null
    dtype: int
    init: false
    required: false
  window:
    default: null
    dtype: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
    init: false
    required: false
infered_history: []
infered_times: 21
package: torch
pass_rate: 0.85
rules:
- cot: 'The error arises because the function expects a 1D or 2D tensor but the input
    is a 0D tensor. Let''s see what the args were. The ''input'' tensor rank is 0,
    but it should be either 1 or 2. Therefore, ''input.rank'' should fall within the
    range [1, 2]. The ''hop_length'' is 0, but it should be a positive integer. So,
    the constraints we can revise are as follows:'
  target: 'stft(torch.FloatTensor[], n_fft=4, hop_length=0, win_length=3, window=torch.FloatTensor{[0]},
    normalized=1, onesided=1, return_complex=0) : expected a 1D or 2D tensor'
  txt: (input.dtype == torch.complex64) and (((input.dim == 1 or input.dim == 2) and
    (window.dim == 1 or window.dim == 2)) and ((len(window) == win_length) and (hop_length
    > 0)))
- cot: 'Based on given values, Error is triggered because the window tensor dimension
    is not 1D and its size is not equal to win_length. It expects the window tensor
    to be 1D and its size to be equal to win_length. The args show that the window
    tensor is of size [1, 3] instead of [2] (win_length=2), and it''s not 1D. Therefore,
    the constraints should be corrected as follows:'
  target: 'stft(torch.FloatTensor[6, 8, 6, 6, 1, 3, 4, 1, 3, 2], n_fft=1, hop_length=7,
    win_length=6, window=torch.FloatTensor{[]}, normalized=1, onesided=0, return_complex=0)
    : expected a 1D or 2D tensor'
  txt: len(window.shape) == 1 and window.shape[0] == win_length
- cot: 'The error is due to the onesided output when either the window or input is
    complex. Based on the given values, the ''input'' tensor is of complex64 type
    and ''onesided'' is True. Therefore, to prevent the error, the ''onesided'' parameter
    should be False when the ''input'' or ''window'' is of complex type. Left : type(input)
    or type(window), Op : in, Right : [complex64, complex128], and Constraint : onesided
    == False.'
  target: Cannot have onesided output if window or input is complex
  txt: onesided==False
time_cost: 2923.366567134857
title: torch.stft
tokens_used: 16091
trained: true
