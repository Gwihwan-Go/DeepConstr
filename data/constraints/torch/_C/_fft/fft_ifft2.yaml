constraints:
  input:
    default: null
    dtype: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
    init: false
    required: true
  norm:
    default: null
    dtype: Literal['forward', 'backward', 'ortho']
    init: false
    required: false
  out:
    default: null
    dtype: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
    init: false
    required: false
infered_history: []
infered_times: 16
package: torch
pass_rate: 0.75
rules:
- cot: 'The error occurs because a dimension of -2 is being accessed, but the valid
    dimensions for a tensor of shape [3] are only -1 and 0. Therefore, the ''dim''
    value should be in the range of [-len(input.shape), len(input.shape)-1].


    The constraint for the ''dim'' parameter can be expressed as:'
  target: Dimension out of range (expected to be in range of [-1, 0], but got -2)
  txt: dim >= -len(input.shape) and dim < len(input.shape)
- cot: 'Error is triggered because a dimension is specified as -2 for a tensor that
    has no dimensions. The ''input'' tensor and the ''out'' tensor do not have any
    dimensions as specified by the empty square brackets []. Therefore, the dimensions
    of ''input'' and ''out'' should be greater than or equal to 2. Let''s see what
    the args were. Left : len(input.shape) and len(out.shape), Op : >=, Right : 2'
  target: Dimension specified as -2 but tensor has no dimensions
  txt: len(out.shape)>=2
- cot: 'The error is due to the data type of the output tensor ''out''. The fftn function
    expects a complex output tensor, but the current tensor is of type Half (float16).
    Let''s see what the args were. The ''out'' tensor is of type Half, which is the
    problem. The data type of ''out'', which is type(out), should be corrected. Therefore,
    Left: type(out). It says that should be equal to the datatype of complex, so Op:
    ==, and Right: complex.'
  target: fftn expects a complex output tensor, but got Half
  txt: type(out) == complex
- cot: The error is due to trying to resize a tensor that is not resizable. The input
    tensor and the output tensor have different dimensions, and the 'norm' attribute
    is set to 'ortho'. The tensor dimensions should match, or the tensor should be
    resizable. Therefore, the constraints should check if the tensor is resizable,
    and if not, the dimensions of the input and output tensors should be equal.
  target: Trying to resize storage that is not resizable
  txt: input.shape == out.shape
time_cost: 658.26247215271
title: torch._C._fft.fft_ifft2
tokens_used: 10295
trained: true
