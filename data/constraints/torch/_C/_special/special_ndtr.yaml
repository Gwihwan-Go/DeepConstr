constraints:
  input:
    default: null
    dtype: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
    init: false
    required: true
  out:
    default: null
    dtype: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
    init: false
    required: false
infered_history: []
infered_times: 19
package: torch
pass_rate: 0.97
rules:
- cot: "The error is triggered because of an attempt to resize a storage that is not\
    \ resizable. Looking at the provided values, 'input' and 'out' are tensors with\
    \ different shapes. The 'input' tensor has a shape of [6, 8, 6, 6, 1], and the\
    \ 'out' tensor has a shape of [8, 2, 7]. \n\nThe error suggests that a resizing\
    \ operation is being attempted on one of these tensors. If the 'input' tensor\
    \ is being resized to match the 'out' tensor, or vice versa, this operation would\
    \ fail if the tensor is not resizable. \n\nTo prevent this error, it's necessary\
    \ to ensure that the 'input' and 'out' tensors have the same shape before the\
    \ operation, or that the tensor being resized is indeed resizable. Therefore,\
    \ the constraints could be:"
  target: Trying to resize storage that is not resizable
  txt: input.shape == out.shape
- cot: 'The error is caused because the output type is ''int32'', but the result type
    is ''float32''. The output type needs to match the result type. Therefore, Left
    : type(out), Right : type(input). The type of ''out'' should be ''float32'' to
    match the type of ''input''. Op : =='
  target: result type Float can't be cast to the desired output type Int
  txt: type(out) == float32
time_cost: 1417.1326897144318
title: torch._C._special.special_ndtr
tokens_used: 11477
trained: true
