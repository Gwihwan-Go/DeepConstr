constraints:
  A:
    default: null
    dtype: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
    init: false
    required: true
  mode:
    default: reduced
    dtype: Literal['reduced', 'complete']
    init: false
    required: false
infered_history: []
infered_times: 2
package: torch
pass_rate: 1.0
rules:
- cot: 'The error is triggered because the input tensor ''A'' should have at least
    2 dimensions, but it currently has only 1 dimension. Let''s see what the args
    were. The tensor ''A'' has only one dimension. Therefore, Left : A.ndims(). It
    says that the number of dimensions of ''A'' should be at least 2, so Op : >=,
    and Right : 2.'
  target: 'linalg.qr: The input tensor A must have at least 2 dimensions.'
  txt: A.ndims() >= 2
- cot: 'Error is triggered because of wrong tensor type. It expects to have a floating
    point or complex tensor, but got Short. Let''s see what the args were. ''A'' has
    a tensor of dtype int16, and is the problem. so the dtype of ''A'' should be corrected,
    which is ''A''.dtype. Therefore, it implies that dtype cannot be Short, and expect
    it to be float or complex, so Op : ==, and Right : tf.float32, tf.float64, tf.complex64,
    tf.complex128.'
  target: 'linalg.qr: Expected a floating point or complex tensor as input. Got Short'
  txt: '''A''.dtype == tf.float32 or ''A''.dtype == tf.float64 or ''A''.dtype == tf.complex64
    or ''A''.dtype == tf.complex128'
time_cost: 103.77711296081543
title: torch._C._linalg.linalg_qr
tokens_used: 1327
trained: true
