constraints:
  input:
    default: 'null'
    dtype: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
    init: false
    required: true
  keepdim:
    default: 'false'
    dtype: bool
    init: false
    required: false
  ord:
    default: fro
    dtype: Literal['fro', 'nuc']
    init: false
    required: false
  out:
    default: 'null'
    dtype: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
    init: false
    required: false
infered_history: []
infered_times: 41
package: torch
pass_rate: 0.0
rules:
- cot: 'The error is due to passing an unsupported ''ord'' value to the linalg.matrix_norm
    function. According to the error message, the ''ord'' value provided is 5, which
    is not supported. Therefore, ''ord'' should be a valid order supported by linalg.matrix_norm.
    So, type(ord) should be in the list of supported ord values. In addition, the
    ''input'' tensor should also have a correct shape suitable for the matrix norm
    operation. For instance, it can be a 2D matrix or a batch of 2D matrices. This
    can be checked by len(input.shape) >= 2, Op : >=, and Right : 2. Furthermore,
    the ''out'' tensor should be correctly shaped to hold the result of the operation.
    This can be checked by len(out.shape) <= len(input.shape), Op : <=, and Right
    : len(input.shape).'
  target: 'linalg.matrix_norm: Order 5 not supported.'
  txt: (ord > 0) and (len(input.shape) >= 2)
- cot: "The 'ord' error is likely due to a mismatch between the dimensions of the\
    \ input tensor and the output tensor. Considering the provided values, the dimensions\
    \ of the input tensor are [6, 8, 6, 6, 1, 3] and the dimensions of the output\
    \ tensor are [8, 2, 1]. This discrepancy between the input and output dimensions\
    \ could be causing the 'ord' error. \n\nTo prevent this error in the future, we\
    \ need to ensure the dimensions of the output tensor match the expected dimensions\
    \ based on the input tensor and the 'keepdim' parameter. If 'keepdim' is True,\
    \ the output tensor should have the same number of dimensions as the input tensor.\
    \ If 'keepdim' is False, the output tensor should have one less dimension than\
    \ the input tensor. \n\nThe constraints can be expressed as follows:\n\nIf 'keepdim'\
    \ is True:"
  target: '''ord'''
  txt: (ord < len(input.shape)) and ((len(input.shape) - 1 == len(out.shape)) and
    ((len(input) >= 0) or ((input.dim >= ord) and (len(input.shape) - 1 == len(out.shape)))))
- cot: "The error indicates that the 'out' tensor has a data type of int16 (Short),\
    \ but the function 'linalg.matrix_norm' expects a float type. The 'input' tensor\
    \ has a data type of float32 which is the correct type for this function. To prevent\
    \ this error, we need to ensure that the 'out' tensor has the same data type as\
    \ the 'input' tensor. \n\nThe constraint for the 'out' parameter can be expressed\
    \ as:"
  target: 'linalg.matrix_norm expected out tensor dtype Double but got: Float'
  txt: (type(out) == Float) and ((len(out.shape) == len(input.shape)) or ((type(out)
    == Double) and (type(out) == type(input))) or (len(out.shape) == len(input.shape)))
time_cost: 3504.050005674362
title: torch._C._linalg.linalg_matrix_norm
tokens_used: 30046
trained: true
