constraints:
  input:
    default: null
    dtype: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
    init: false
    required: true
infered_history: []
infered_times: 8
package: torch
pass_rate: 0.97
rules:
- cot: "The error message says that the input tensor should be batches of square matrices,\
    \ but the provided tensor is not square (10 by 3 instead of 10 by 10). The last\
    \ two dimensions of the tensor represent the matrix dimensions. For a matrix to\
    \ be square, the number of rows should be equal to the number of columns, which\
    \ means the last two dimensions of the tensor should be equal. \n\nSo, the constraints\
    \ to prevent this error from happening would be:"
  target: 'linalg.eig: A must be batches of square matrices, but they are 10 by 3
    matrices'
  txt: input[-1] == input[-2]
- cot: 'The error is triggered because the input tensor A must have at least 2 dimensions.
    Let''s see what the args were. The ''input'' tensor is of size [2], which means
    it only has one dimension. Therefore, Left : len(input.shape), which is the number
    of dimensions of tensor ''input'', should be corrected. It says that should be
    greater than or equal to 2, so Op : >=, and Right : 2.'
  target: 'linalg.eig: The input tensor A must have at least 2 dimensions.'
  txt: len(input.shape)>=2
time_cost: 100.27846145629883
title: torch._C._linalg.linalg_eig
tokens_used: 4362
trained: true
