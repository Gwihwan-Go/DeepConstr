constraints:
  input:
    default: null
    dtype: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
    init: false
    required: true
  other:
    default: null
    dtype: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
    init: false
    required: true
  out:
    default: null
    dtype: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
    init: false
    required: false
infered_history: []
infered_times: 22
package: torch
pass_rate: 0.03
rules:
- cot: 'The error arises because the dtype of ''input'' and ''other'' are not same.
    ''input'' is of type Float while ''other'' is of type ComplexDouble. The linalg.solve
    function expects ''input'' and ''other'' to have the same dtype. So, the dtype
    of ''input'' and ''other'' should be same. This can be represented as Left : input.dtype,
    op : ==, Right : other.dtype'
  target: 'linalg.solve: Expected A and B to have the same dtype, but found A of type
    Float and B of type ComplexDouble instead'
  txt: input.dtype==other.dtype
- cot: 'The error is triggered because the program is trying to create a vector that
    is larger than the maximum allowable size. The arguments were ''input'' with shape
    [6, 8], ''other'' with shape [2, 8, 2, 6, 6, 8], and ''out'' which is empty. It
    seems the ''other'' tensor has too many dimensions compared to ''input''. The
    first dimension of ''other'' should be equal to the first dimension of ''input''
    and the second dimension of ''other'' should be equal to the second dimension
    of ''input''. Therefore, Left : len(other.shape), Op : ==, Right : len(input.shape).
    Then, for each dimension i, Left : other.shape[i], Op : ==, Right : input.shape[i].'
  target: cannot create std::vector larger than max_size()
  txt: len(other.shape)==len(input.shape)
- cot: "The error occurs because the output tensor 'out' has a Boolean data type,\
    \ while it is expected to be a Float type. Let's see what the args were. The input\
    \ tensors 'input' and 'other' are both of type float32, but the output tensor\
    \ 'out' is of type bool. \n\nTherefore, in order to prevent this error from occurring\
    \ again, we should ensure that the data type of 'out' matches with the data types\
    \ of 'input' and 'other'. The constraint for this can be written as:"
  target: 'tensorsolve: Expected result to be safely castable from Float dtype, but
    got result with dtype Bool'
  txt: out.dtype == input.dtype and out.dtype == other.dtype
time_cost: 745.898565530777
title: torch._C._linalg.linalg_tensorsolve
tokens_used: 14287
trained: true
