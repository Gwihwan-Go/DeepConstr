constraints:
  dim:
    default: -1
    dtype: int
    init: false
    required: false
  input:
    default: null
    dtype: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
    init: false
    required: true
  other:
    default: null
    dtype: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
    init: false
    required: true
  out:
    default: null
    dtype: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
    init: false
    required: false
infered_history: []
infered_times: 6
package: torch
pass_rate: 0.0
rules:
- cot: 'The error is due to an invalid dimension value. For the ''dim'' argument,
    the value provided is 3 which is not in the range of allowed values [-1, 0]. Therefore,
    ''dim'' should be corrected to be either -1 or 0. Op : in, and Right : [-1, 0].
    Also, the size of ''dim'' should not exceed the rank of ''input'', ''other'',
    and ''out'' tensors. Therefore, ''dim'' < len(''input''.shape), ''dim'' < len(''other''.shape),
    and ''dim'' < len(''out''.shape) should also hold true.'
  target: Dimension out of range (expected to be in range of [-1, 0], but got 3)
  txt: (('dim' < len('out'.shape))) or ((dim >= -1 and dim <= 0) and dim < len(input.shape))
    or (('dim' < len('out'.shape)))
- cot: 'The error is due to the invalid dimension length. The function is expecting
    the input tensors to have length 3 in dimension 0, but it got 8 in both cases.
    Let''s look at the arguments. The input tensors are ''input'' and ''other''. The
    length of their dimension 0 is being checked, and it must be 3. So, input.shape[dim]
    should be 3, Op : ==, and Right : 3. Similarly, other.shape[dim] should also be
    3, Op : ==, and Right : 3.'
  target: 'linalg.cross: inputs dimension 0 must have length 3. Got 8 and 8'
  txt: (input.shape[0] == 3) and ((other.shape[dim] == 3) and (input.shape[dim] ==
    3))
time_cost: 667.9471406936646
title: torch._C._linalg.linalg_cross
tokens_used: 4263
trained: true
