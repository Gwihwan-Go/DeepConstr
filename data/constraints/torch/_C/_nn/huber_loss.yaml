constraints:
  delta:
    default: 1.0
    dtype: float
    init: false
    required: false
  input:
    default: null
    dtype: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
    init: false
    required: true
  target:
    default: null
    dtype: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
    init: false
    required: true
infered_history: []
infered_times: 20
package: torch
pass_rate: 0.78
rules:
- cot: 'Error is triggered because size of tensor a (2) does not match the size of
    tensor b (6) at non-singleton dimension 9. What the args were? the two tensors
    matching problem at non-singleton dimension looks like broadcasting request. Broadcasting
    in tensor operations requires that the trailing dimensions of the tensors are
    either 1 or the same. We start from the last dimension because broadcasting aligns
    dimensions from the end. Therefore, we can revise the constraints as follows:'
  target: The size of tensor a (2) must match the size of tensor b (6) at non-singleton
    dimension 9
  txt: all(input.shape[i] == target.shape[i] or input.shape[i] == 1 or target.shape[i]
    == 1 for i in range(-1, -min(len(input.shape), len(target.shape))-1, -1))
- cot: 'The error is triggered because the result type Int cannot be cast to the desired
    output type Bool. Let''s examine the args. ''Delta'' is a float type, ''input''
    is a bool tensor and ''target'' is an int tensor. Therefore, the dtype of ''input''
    and ''target'' should be consistent. Left : type(target), op : ==, comparator
    : type(input)'
  target: result type Int can't be cast to the desired output type Bool
  txt: type(target)==type(input)
- cot: The error is caused by the 'delta' value being a non-positive number. The 'huber_loss'
    function does not support non-positive values for 'delta'. Therefore, the 'delta'
    value must be greater than 0. The operator used in this case should be '>', and
    the right value should be 0.
  target: huber_loss does not support non-positive values for delta.
  txt: delta > 0
time_cost: 612.1753883361816
title: torch.nn.functional.huber_loss
tokens_used: 10950
trained: true
