constraints:
  dim:
    default: null
    dtype: int
    init: false
    required: false
  input:
    default: null
    dtype: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
    init: false
    required: true
  sizes:
    default: null
    dtype: list[int]
    init: false
    required: false
infered_history: []
infered_times: 5
package: torch
pass_rate: 0.03
rules:
- cot: "The error occurs because the dimension 'dim' provided is outside the valid\
    \ range. The valid range for the dimension is based on the shape of the 'input'\
    \ tensor. In the given values, the 'input' tensor has a shape of [9, 10], which\
    \ means it has 2 dimensions. Therefore, the valid range for 'dim' would be [-2,\
    \ 1]. \n\nHowever, the provided 'dim' value is 5 which is outside this range and\
    \ thus, causing the error. \n\nTo prevent this error from occurring again, we\
    \ need to ensure that the 'dim' value is always within the valid range. The constraint\
    \ for the 'dim' parameter can be expressed as:"
  target: Dimension out of range (expected to be in range of [-2, 1], but got 5)
  txt: dim >= -len(input.shape) and dim < len(input.shape)
- cot: 'The error is due to the presence of a negative shape dimension, specifically
    -500. The system expects all dimensions to be non-negative. Hence, the sizes array
    contains unacceptable values. Therefore, Left : sizes[i] which is the each size
    in sizes should be corrected. It says that cannot be negative, so Op : >=, and
    Right : 0. Also, each size in sizes should be less than corresponding dimension
    in input''s shape. So, Left : sizes[i], Op : <, and Right : input.shape[i].'
  target: invalid shape dimension -500
  txt: ((sizes[i] >= 0 for i in range(dim))) or (all(sizes[i] >= 0 and sizes[i] <
    input.shape[i] for i in range(len(sizes))))
time_cost: 51.65307307243347
title: torch.unflatten
tokens_used: 3416
skipped: true 
skipped_reason: unsupport constraints( tensor elements )