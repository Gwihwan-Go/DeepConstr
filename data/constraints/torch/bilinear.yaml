constraints:
  bias:
    default: null
    dtype: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
    init: false
    required: false
  input1:
    default: null
    dtype: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
    init: false
    required: true
  input2:
    default: null
    dtype: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
    init: false
    required: true
  weight:
    default: null
    dtype: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
    init: false
    required: true
infered_history: []
infered_times: 6
package: torch
pass_rate: 0.0
rules:
- cot: "The error suggests there's a mismatch between the size of 'input1' and the\
    \ 'weight' tensor along a particular dimension. In a bilinear operation, the size\
    \ of 'input1' should match the last dimension of 'weight'. What the args were?\
    \ In given values, 'input1' has size 4 while the last dimension of 'weight' has\
    \ size 3. \n\nTherefore, the constraint is as follows:"
  target: 'bilinear(): input1 size does not match weight size: got 4 but expected
    3'
  txt: (len(input1.shape) == weight.shape[1]) and (input1.size == weight.shape[-1])
- cot: "The error is due to an incorrect dimension. According to the error message,\
    \ the expected dimension range is between -1 and 0, which means that the tensor\
    \ should either be a scalar or a 1-dimensional tensor. However, looking at the\
    \ given values, both 'bias' and 'weight' tensors have dimensions outside this\
    \ range. Therefore, we need to establish constraints for the dimensions of 'bias'\
    \ and 'weight'. \n\nFor 'bias', the left side is 'bias.ndim()', the operation\
    \ is 'in', and the right side is '[-1, 0]'. \nFor 'weight', the left side is 'weight.ndim()',\
    \ the operation is 'in', and the right side is '[-1, 0]'."
  target: Dimension out of range (expected to be in range of [-1, 0], but got 1)
  txt: weight.ndim() in [-1, 0]
- cot: 'Error is triggered because the dimensions of input1 and input2 do not match,
    which are 2 and 10 respectively. Let''s see what the args were. According to the
    error message, the dimensions of input1 and input2 should match. Therefore, left
    : len(input1), len(input2) op : == right : len(input2), len(input1).'
  target: 'bilinear(): input dimensions do not match: got 2 and 10'
  txt: (input1[-1]==input2[-2]) and ((all(input1.shape[i]==input2.shape[i] for i in
    range(len(input1.shape)))) and ((input2.shape[1] == 10) and ((input2.shape[-1]
    == 10) and (len(input1) == len(input2)))))
time_cost: 51.19145488739014
title: torch.bilinear
tokens_used: 2756
skipped: true 
skipped_reason: constraints infer failed 