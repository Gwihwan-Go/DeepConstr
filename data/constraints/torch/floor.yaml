alias: torch.floor
constraints:
  input:
    default: null
    dtype: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
    init: false
    required: true
  out:
    default: null
    dtype: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
    init: false
    required: false
infered_history: []
infered_times: 10
package: torch
pass_rate: 1.0
rules:
- cot: 'Error is due to the mismatch of expected and actual data type. It expects
    Float but got Int. Let''s see what the args were. It seems ''out'' tensor has
    dtype as Int32, which is causing the problem. So the dtype of ''out'' should be
    corrected, which is out.dtype. Therefore, Left : out.dtype(). It says that expected
    Float, so Op : ==, and Right : float32. Also, It implies that dtype cannot be
    int, so Op : !=, and Right : int32.'
  target: Found dtype Int but expected Float
  txt: (input.dtype == Float32) and (out.dtype() == float32)
- cot: The error is triggered because we are trying to resize a tensor ('out'), which
    isn't resizable. Based on the given values, 'input' tensor has a shape of [6,8]
    and 'out' tensor has a shape of [2,8]. It's required that the 'out' tensor's shape
    should match the operation result's shape. In this operation, the result shape
    is input.shape. Therefore, the constraint should be that the shape of 'out' should
    be equal to the shape of 'input'.
  target: Trying to resize storage that is not resizable
  txt: out.shape == input.shape
time_cost: 416.35356616973877
title: torch.floor
tokens_used: 5964
