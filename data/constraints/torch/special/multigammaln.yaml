alias: torch.special.multigammaln
constraints:
  input:
    default: null
    dtype: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
    init: false
    required: true
  out:
    default: null
    dtype: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
    init: false
    required: false
  p:
    default: null
    dtype: int
    init: false
    required: true
infered_history: []
infered_times: 31
package: torch
pass_rate: 0.93
rules:
- cot: 'Error is triggered because of we are trying to resize storage. Let''s see
    what the args were. It seems ''out'' tensor shape does not match with ''input''
    tensor shape. This operation expects ''out'' tensor shape to be equal to ''input''
    tensor shape. Therefore, left : out.shape, out.rank op : == right : input.shape,
    input.rank'
  target: Trying to resize storage that is not resizable
  txt: out.rank==input.rank and all(out.shape[i]==input.shape[i] for i in range(out.rank))
- cot: "The error is caused by an invalid 'p' value. Looking at the args, 'p' is currently\
    \ 0, which is less than the required minimum value of 1. To prevent this error\
    \ from occurring in the future, we need to ensure that 'p' is always greater than\
    \ or equal to 1. \n\nThe constraint for the 'p' parameter can be expressed as:"
  target: p has to be greater than or equal to 1
  txt: p >= 1
- cot: 'The error message indicates that the output type of the function ''mvlgamma''
    cannot be cast to the desired output type, which is float. The current output
    type is int16, but the function ''mvlgamma'' requires its output to be of float
    type. Therefore, the output type should be corrected to match the required type.
    Let''s relate the types to generate the constraint. Left : out.dtype, op : ==,
    comparator : "float32"'
  target: 'mvlgamma: result type Float can''t be cast to the desired output type Float'
  txt: out.dtype=='float32'
time_cost: 950.185210943222
title: torch.special.multigammaln
tokens_used: 16942
trained: true
