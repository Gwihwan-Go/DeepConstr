alias: torch.special.polygamma
constraints:
  input:
    default: null
    dtype: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
    init: false
    required: true
  n:
    default: null
    dtype: int
    init: false
    required: true
  out:
    default: null
    dtype: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
    init: false
    required: false
infered_history: []
infered_times: 22
package: torch
pass_rate: 0.72
rules:
- cot: 'The error is triggered because the result type float cannot be cast to the
    desired output type int. Looking at the values, ''input'' has a dtype of float32
    and ''out'' has a dtype of int32. The ''out'' dtype should match the ''input''
    dtype to prevent this error. Therefore, Left : type(input), op : ==, comparator
    : type(out)'
  target: result type Float can't be cast to the desired output type Int
  txt: type(input)==type(out)
- cot: "Given the error message \"Trying to resize storage that is not resizable\"\
    , it seems that the 'out' tensor's shape is not compatible with the 'input' tensor's\
    \ shape or the operation's output. The 'out' tensor's shape must match the operation's\
    \ result shape for the operation to work without causing any errors. With the\
    \ values provided for 'input', 'n', and 'out', the operation is attempting to\
    \ resize the 'out' tensor to fit the 'input' tensor's shape. \n\nThe 'input' tensor\
    \ has the shape [6, 8, 6, 6] and the 'out' tensor has the shape [2, 8, 1], which\
    \ are not compatible. Therefore, the 'out' tensor's shape should be changed to\
    \ match the 'input' tensor's shape.\n\nThis can be represented as:"
  target: Trying to resize storage that is not resizable
  txt: out.shape == input.shape
- cot: The error indicates that the function 'polygamma(n, x)' does not support 'n'
    being negative. The received 'n' value is -1 which triggers the error. Hence,
    value of 'n' should be non-negative. The logical relationship constraint should
    be n >= 0.
  target: polygamma(n, x) does not support negative n.
  txt: n >= 0
time_cost: 25605.560641527176
title: torch.special.polygamma
tokens_used: 13008
trained: true
