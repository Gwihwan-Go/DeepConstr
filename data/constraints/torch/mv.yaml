alias: torch.mv
constraints:
  input:
    default: null
    dtype: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
    init: false
    required: true
  out:
    default: null
    dtype: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
    init: false
    required: false
  vec:
    default: null
    dtype: float16,float32,float64,uint8,complex64,complex128,int8,int16,int32,int64,bool
    init: false
    required: true
infered_history: []
infered_times: 45
package: torch
pass_rate: 0.33
rules:
- cot: 'The error arises because the dimensions of the vectors and matrix do not allow
    for the desired operation. The constraint here is that for a matrix-vector multiplication,
    the number of columns in the matrix should equal the number of elements in the
    vector. The output vector should have the same number of elements as the rows
    in the matrix.


    If we denote the number of rows in the matrix (vec) as m, the number of columns
    as n, and the length of the input vector as p, the length of the output vector
    as q, the constraints can be expressed as:


    1. n == p

    2. m == q


    In terms of the given symbols, these constraints can be translated into:'
  target: vector + matrix @ vector expected, got 1, 10, 10
  txt: (all(vec.shape[i] == input.shape[i] for i in range(len(vec.shape)))) and ((len(input.shape)
    == 2 and len(out.shape) == 1 and len(vec.shape) == 1 and len(vec) == input.shape[1])
    and ((len(out.shape) == 2) or (((out.size == input.shape[0])) and (len(vec) ==
    len(out)))))
- cot: 'Error is triggered because of size mismatch among input, mat (which is part
    of input), and vec. Let''s see what the args were. The number of columns in mat
    (input[1]) should match the number of elements in vec. Also, the number of rows
    in mat (input[0]) should match the size of out. Therefore, Left : input[1]. Op
    : ==, Right : len(vec) and Left : input[0]. Op : ==, Right : out.shape[0].'
  target: size mismatch, got input (8), mat (8x6), vec (2)
  txt: ((out.shape[0] == vec.shape[0]) and (((len(vec) == len(input)) and (input[1]
    == len(vec))) or (input.shape[1] == vec.shape[0]) or ((len(vec) == len(input))
    and (input[1] == len(vec))))) or (input.shape[1] == vec.shape[0]) or ((out.shape[0]
    == vec.shape[0]) and (((len(vec) == len(input)) and (input[1] == len(vec))) or
    (input.shape[1] == vec.shape[0]) or ((len(vec) == len(input)) and (input[1] ==
    len(vec)))))
- cot: 'Error is triggered because the dimension specified as 0 but tensor has no
    dimensions. For the tensors `input` and `vec`, they have no dimensions, but operations
    might have been attempted to access the 0th dimension, which is not existent.
    So, we need to ensure that these tensors have at least one dimension. Therefore,
    Left : len(input.shape), op : >, right : 0, and Left : len(vec.shape), op : >,
    right : 0.'
  target: Dimension specified as 0 but tensor has no dimensions
  txt: len(input.shape) > 0 and len(vec.shape) > 0
time_cost: 28956.740066051483
title: torch.mv
tokens_used: 34570
trained: true
